[{"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js":"1","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js":"2","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js":"3","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js":"4","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js":"5","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js":"6","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js":"7","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js":"8","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js":"9","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js":"10","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js":"11","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js":"12","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js":"13","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js":"14","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js":"15","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js":"16","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js":"17","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js":"18","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js":"19","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js":"20","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js":"21","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js":"22","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js":"23","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\GroupInfoModal.js":"24","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DeleteMessageModal.js":"25","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\DeleteMessageModal.js":"26","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\DeleteMessageModal.js":"27","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\UpdateMessageModal.js":"28","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\UpdateMessageModal.js":"29"},{"size":418,"mtime":1610933324659,"results":"30","hashOfConfig":"31"},{"size":338,"mtime":1617518971144,"results":"32","hashOfConfig":"31"},{"size":1678,"mtime":1616907755626,"results":"33","hashOfConfig":"31"},{"size":3604,"mtime":1619348276790,"results":"34","hashOfConfig":"31"},{"size":14379,"mtime":1619348276784,"results":"35","hashOfConfig":"31"},{"size":693,"mtime":1610886576089,"results":"36","hashOfConfig":"31"},{"size":425,"mtime":1610930046244,"results":"37","hashOfConfig":"31"},{"size":488,"mtime":1610968041436,"results":"38","hashOfConfig":"31"},{"size":4779,"mtime":1619351014184,"results":"39","hashOfConfig":"31"},{"size":10077,"mtime":1619346863628,"results":"40","hashOfConfig":"31"},{"size":6558,"mtime":1619344193092,"results":"41","hashOfConfig":"31"},{"size":1165,"mtime":1619344193132,"results":"42","hashOfConfig":"31"},{"size":12161,"mtime":1617533839023,"results":"43","hashOfConfig":"31"},{"size":3896,"mtime":1619344193103,"results":"44","hashOfConfig":"31"},{"size":3980,"mtime":1619344193107,"results":"45","hashOfConfig":"31"},{"size":25589,"mtime":1619348276788,"results":"46","hashOfConfig":"31"},{"size":3917,"mtime":1619344193130,"results":"47","hashOfConfig":"31"},{"size":3892,"mtime":1619344193114,"results":"48","hashOfConfig":"31"},{"size":3514,"mtime":1619344193116,"results":"49","hashOfConfig":"31"},{"size":4444,"mtime":1619344193112,"results":"50","hashOfConfig":"31"},{"size":4560,"mtime":1619344193125,"results":"51","hashOfConfig":"31"},{"size":4477,"mtime":1619344193122,"results":"52","hashOfConfig":"31"},{"size":4506,"mtime":1619344193124,"results":"53","hashOfConfig":"31"},{"size":6502,"mtime":1619344193120,"results":"54","hashOfConfig":"31"},{"size":2751,"mtime":1619344193098,"results":"55","hashOfConfig":"31"},{"size":2836,"mtime":1619348276785,"results":"56","hashOfConfig":"31"},{"size":2182,"mtime":1619344193105,"results":"57","hashOfConfig":"31"},{"size":3180,"mtime":1619344193104,"results":"58","hashOfConfig":"31"},{"size":3234,"mtime":1619348276789,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"5ivkir",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"62"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"62"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"62"},"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js",[],["139","140"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js",["141","142"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport RouterSetup from \"./RouterSetup\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4201/api\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"App__container\">\r\n      <RouterSetup />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js",["143","144"],"import React from \"react\";\r\nimport \"./Login.css\";\r\nimport ProfileImage from \"../../assets/images/profile.png\";\r\nimport { auth, provider } from \"../../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\n\r\nconst Login = () => {\r\n  const [{}, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  const signInHandler = async () => {\r\n    try {\r\n      const result = await auth.signInWithPopup(provider);\r\n      const userData = {\r\n        displayname: result.user.displayName,\r\n        email: result.user.email,\r\n        avatarUrl: result.user.photoURL,\r\n      };\r\n\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: userData,\r\n      });\r\n\r\n      await axios.post(\"/adduser\", { ...userData });\r\n\r\n      var email = userData.email;\r\n\r\n      var response = await axios.post(\"/fetchconnections\", {\r\n        email: email,\r\n      });\r\n\r\n      var emailresponse = await axios.post(\"/fetchconnections\", {\r\n        email: email,\r\n      });\r\n\r\n      var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var response4 = await axios.post(\"/fetchgroups\", {\r\n        email: email,\r\n      });\r\n\r\n      var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var connections = response.data.connections;\r\n      var emailconnections = emailresponse.data.connections;\r\n      var groups = response4.data.groups;\r\n\r\n      for (let i = 0; i < connections.length; i++) {\r\n        if (response2.data.unseencount[connections[i].email] === undefined)\r\n          connections[i].unseen = 0;\r\n        else\r\n          connections[i].unseen =\r\n            response2.data.unseencount[connections[i].email];\r\n      }\r\n\r\n      for (let i = 0; i < groups.length; i++) {\r\n        if (response5.data.unseencount[groups[i]._id] === undefined)\r\n          groups[i].unseen = 0;\r\n        else groups[i].unseen = response5.data.unseencount[groups[i]._id];\r\n      }\r\n\r\n      for (let i = 0; i < emailconnections.length; i++) {\r\n        if (response3.data.unseencount[emailconnections[i].email] === undefined)\r\n          emailconnections[i].unseenemail = 0;\r\n        else\r\n          emailconnections[i].unseenemail =\r\n            response3.data.unseencount[emailconnections[i].email];\r\n      }\r\n\r\n      connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n      groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n      emailconnections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n      history.push({\r\n        pathname: \"/dashboard\",\r\n        state: {\r\n          user: userData,\r\n          connections: connections,\r\n          emailconnections: emailconnections,\r\n          groups: groups,\r\n          allMessages: [],\r\n          emailMessages: [],\r\n        },\r\n      });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div className=\"Login__container\">\r\n        <div className=\"Login__header\">\r\n          <img src={ProfileImage} alt=\"Image\" />\r\n          <br />\r\n          <h4>SecureEncrypt Chat</h4>\r\n        </div>\r\n        <div className=\"Login__footer\">\r\n          <button class=\"Login__button\" type=\"submit\" onClick={signInHandler}>\r\n            SIGN IN WITH GOOGLE ACCOUNT\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./DirectMessages.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport DateFormat from \"dateformat\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport DeleteMessageModal from \"./DeleteMessageModal\";\r\nimport UpdateMessageModal from \"./UpdateMessageModal\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst DirectMessages = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n  var editbutton = undefined;\r\n  var deletebutton = undefined;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [active, setActive] = useState(\r\n    location.state.active !== undefined ? location.state.active : -1\r\n  );\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState(location.state.allMessages);\r\n  const [connectionEmail, setConnectionEmail] = useState(\r\n    location.state.connectionemail ? location.state.connectionemail : \"\"\r\n  );\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n    email: user.email,\r\n    connectionemail: connectionEmail,\r\n  });\r\n  const [deleteMessageModal, setDeleteMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [updateMessageModal, setUpdateMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    if (active != -1) {\r\n      $(\"#connection\" + active).addClass(\"DirectMessages__connections_active\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"http://localhost:4201\");\r\n\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = connections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setConnections(newConnections);\r\n    });\r\n\r\n    socket.on(\"directmessages__deletemessage\", (data) => {\r\n      const newMessages = messages.filter((row) => row._id !== data._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"directmessages__updatemessage\", (data) => {\r\n      const newMessages = messages.map((row) => {\r\n        if (row._id === data._id) {\r\n          return data;\r\n        }\r\n        return row;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"directmessages__newmessage\", (data) => {\r\n      if (\r\n        (user.email == data.senderemail || user.email == data.receiveremail) &&\r\n        (connectionEmail == data.senderemail ||\r\n          connectionEmail == data.receiveremail)\r\n      ) {\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, allMessages: [...messages, { ...data }] },\r\n        });\r\n        setMessages([...messages, { ...data }]);\r\n      }\r\n    });\r\n\r\n    socket.on(\"directmessages__delayedmessages\", (data) => {\r\n      const newMessages = data.delayedMessages.filter((message) => {\r\n        return (\r\n          (user.email === message.senderemail ||\r\n            user.email === message.receiveremail) &&\r\n          (connectionEmail === message.senderemail ||\r\n            connectionEmail === message.receiveremail)\r\n        );\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: [...messages, { ...data }] },\r\n      });\r\n      setMessages([...messages, ...newMessages]);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      focusLastDiv();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n\r\n  const addHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.add(\"DirectMessages__message_hover\");\r\n      editbutton.classList.remove(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setMessages(response.data.allMessages);\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n  };\r\n\r\n  const sendMessageHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      text: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      date: date,\r\n      time: time,\r\n    };\r\n    await axios.post(\"/senddirectmessage\", data);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"DirectMessages__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DirectMessages\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".DirectMessages__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"DirectMessages__container\">\r\n        <div className=\"DirectMessages__sidebar w-100 \">\r\n          {connections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                id={\"connection\" + ind}\r\n                className={`DirectMessages__connections `}\r\n                onClick={() => {\r\n                  if (active != -1) {\r\n                    $(\"#connection\" + active).removeClass(\r\n                      \"DirectMessages__connections_active\"\r\n                    );\r\n                  }\r\n                  setActive(ind);\r\n                  $(\"#connection\" + ind).addClass(\r\n                    \"DirectMessages__connections_active\"\r\n                  );\r\n\r\n                  setConnectionEmail(connection.email);\r\n\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"DirectMessages__chat w-100 \">\r\n          <div className=\"DirectMessages__chatarea\">\r\n            {messages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`DirectMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                      onMouseEnter={(e) => {\r\n                        editbutton = e.target.children[0];\r\n                        deletebutton = e.target.children[1];\r\n                        addHoverClass();\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        removeHoverClass();\r\n                      }}\r\n                    >\r\n                      <i\r\n                        class=\"fa fa-pencil-square-o DirectMessages__edit_button DirectMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setUpdateMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                      <i\r\n                        class=\"fa fa-trash DirectMessages__delete_button DirectMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setDeleteMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"DirectMessages__inputarea\">\r\n            <input\r\n              class=\"form-control customform\"\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode == 13) {\r\n                  sendMessageHandler();\r\n                }\r\n              }}\r\n            />\r\n            <i class=\"fa fa-paper-plane\" onClick={sendMessageHandler}></i>\r\n            <i\r\n              class=\"fa fa-clock-o\"\r\n              onClick={() => {\r\n                if (connectionEmail == \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Choose a Recepient...\",\r\n                    ModalBody: \"Please Choose a User to chat with...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (message === \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Type a Message...\",\r\n                    ModalBody: \"Please type something to send...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                setTimerModal({\r\n                  isShown: true,\r\n                  message: message,\r\n                  email: user.email,\r\n                  connectionemail: connectionEmail,\r\n                });\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        email={timermodal.email}\r\n        connectionemail={timermodal.connectionemail}\r\n      />\r\n      <UpdateMessageModal\r\n        isShown={updateMessageModal.isShown}\r\n        setIsShown={setUpdateMessageModal}\r\n        message={updateMessageModal.message}\r\n        editbutton={updateMessageModal.editbutton}\r\n        deletebutton={updateMessageModal.deletebutton}\r\n        connectionemail={connectionEmail}\r\n      />\r\n      <DeleteMessageModal\r\n        isShown={deleteMessageModal.isShown}\r\n        setIsShown={setDeleteMessageModal}\r\n        message={deleteMessageModal.message}\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        editbutton={deleteMessageModal.editbutton}\r\n        deletebutton={deleteMessageModal.deletebutton}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DirectMessages;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js",["161","162","163"],"import React, { useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport Logo from \"../../assets/images/Logo.png\";\r\nimport \"./PageTemplate.css\";\r\nimport axios from \"axios\";\r\n\r\nconst PageTemplate = (props) => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.user) {\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: location.state.user,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REMOVE_USER,\r\n      });\r\n      history.push(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const addConnectionHandler = async () => {\r\n    const response = await axios.post(\"/newconnections\", { email: user.email });\r\n    history.push({\r\n      pathname: \"/connections\",\r\n      state: {\r\n        ...location.state,\r\n        unreadconnections: response.data.unreadconnections,\r\n      },\r\n    });\r\n  };\r\n\r\n  const dashBoardLogoHandler = async () => {\r\n    var email = location.state.user.email;\r\n\r\n    var response = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var emailresponse = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response4 = await axios.post(\"/fetchgroups\", {\r\n      email: email,\r\n    });\r\n\r\n    var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var connections = response.data.connections;\r\n    var emailconnections = emailresponse.data.connections;\r\n    var groups = response4.data.groups;\r\n\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response2.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseen = 0;\r\n      else\r\n        connections[i].unseen =\r\n          response2.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    for (let i = 0; i < groups.length; i++) {\r\n      if (response5.data.unseencount[groups[i]._id] === undefined)\r\n        groups[i].unseen = 0;\r\n      else groups[i].unseen = response5.data.unseencount[groups[i]._id];\r\n    }\r\n\r\n    for (let i = 0; i < emailconnections.length; i++) {\r\n      if (response3.data.unseencount[emailconnections[i].email] === undefined)\r\n        emailconnections[i].unseenemail = 0;\r\n      else\r\n        emailconnections[i].unseenemail =\r\n          response3.data.unseencount[emailconnections[i].email];\r\n    }\r\n\r\n    connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    emailconnections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n    history.push({\r\n      pathname: \"/dashboard\",\r\n      state: {\r\n        user: location.state.user,\r\n        connections: connections,\r\n        emailconnections: emailconnections,\r\n        groups: groups,\r\n        allMessages: [],\r\n        emailMessages: [],\r\n      },\r\n    });\r\n\r\n    if (location.pathname === \"/dashboard\") {\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const settingsHandler = () => {};\r\n\r\n  const logoutHandler = () => {\r\n    dispatch({\r\n      type: actionTypes.REMOVE_USER,\r\n    });\r\n    localStorage.removeItem(\"user\");\r\n\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"PageTemplate__container\">\r\n      <div className=\"PageTemplate__navbar\">\r\n        <nav className=\"navbar\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" onClick={dashBoardLogoHandler}>\r\n              <img\r\n                src={Logo}\r\n                style={{\r\n                  display: \"inline\",\r\n                  width: \"4%\",\r\n                  height: \"70%\",\r\n                  left: \"1.5%\",\r\n                  position: \"absolute\",\r\n                }}\r\n              />\r\n              SecureChat\r\n            </a>\r\n            <div className=\"PageTemplate__navbar_icons\">\r\n              <i onClick={addConnectionHandler} className=\"fa fa-users\"></i>\r\n              <i onClick={settingsHandler} className=\"fa fa-cog\"></i>\r\n              <i onClick={logoutHandler} className=\"fa fa-sign-out\"></i>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"PageTemplate__body\">{props.children}</div>\r\n      <div className=\"PageTemplate__footer\">\r\n        <b>\r\n          ⓒ 2020 - {new Date().getFullYear()} SECURE ENCRYPT CHAT, Inc. All\r\n          rights reserved.\r\n        </b>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js",["164","165","166","167","168","169"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst Dashboard = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  //States\r\n  const [DMSConnections, setDMSConnections] = useState(\r\n    location.state.connections\r\n  );\r\n  const [EmailConnections, setEmailConnections] = useState(\r\n    location.state.emailconnections\r\n  );\r\n  const [groupChats, setGroupChats] = useState(location.state.groups);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"http://localhost:4201\");\r\n\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = DMSConnections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setDMSConnections(newConnections);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const goToDirectMessages = async () => {\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToGroupMessages = async () => {\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToEmails = async () => {\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.emailconnections,\r\n        emailMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    var active = location.state.connections.findIndex((connection) => {\r\n      return connection.email === connectionemail;\r\n    });\r\n\r\n    var connectionemail = \"\";\r\n    if (active != -1) {\r\n      connectionemail = location.state.connections[active].email;\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        connectionemail: connectionemail,\r\n        allMessages: response.data.allMessages,\r\n        active: active,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchGroupChat = async (group) => {\r\n    const response = await axios.post(\"/fetchallgroupmessages\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    await axios.post(\"/groupmessagesseen\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    var active = location.state.groups.findIndex(\r\n      (row) => row._id === group._id && row.name === group.name\r\n    );\r\n    var activeGroup = {};\r\n    if (active != -1) {\r\n      activeGroup = location.state.groups[active];\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        active: active,\r\n        activeGroup: activeGroup,\r\n        allMessages: response.data.allMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchEmail = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchallemails\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.emailconnections,\r\n        emailMessages: response.data.emailMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Dashboard__container\">\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Direct Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToDirectMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Group Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToGroupMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {groupChats.length > 0 ? (\r\n          groupChats.map((group, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchGroupChat(group);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img src={group.pictureUrl} alt=\".\" />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{group.name}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{group.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Groups Available...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Emails </h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i onClick={goToEmails} className=\"fa fa-external-link-square\"></i>\r\n          </div>\r\n        </div>\r\n        {EmailConnections.length > 0 ? (\r\n          EmailConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchEmail(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseenemail}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js",["170","171","172","173","174","175","176"],"import React, { useState } from \"react\";\r\nimport \"./Connections.css\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst Connections = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [connectionemail, setConnectionEmail] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [unreadConnections, setUnreadConnections] = useState(\r\n    location.state.unreadconnections\r\n  );\r\n\r\n  const addConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't send a connection request to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post(\"/addconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const removeConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't remove a connection to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const acceptConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/acceptconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  const rejectConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Connections\">\r\n      <div className=\"Connections__addconnections\">\r\n        <h1>Alter Connections</h1>\r\n        <div className=\"Connections__addconnections_body\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h3>Enter Email ID</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={connectionemail}\r\n                onChange={(e) => {\r\n                  setConnectionEmail(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={addConnectionHandler}\r\n              >\r\n                Send Connection Request\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={removeConnectionHandler}\r\n              >\r\n                Remove Connection\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Connections__incomingconnections\">\r\n        <h1>Connections Requests</h1>\r\n        <div className=\"Connections__incomingconnections_body\">\r\n          {unreadConnections.map((unreadconnection, ind) => {\r\n            return (\r\n              <div className=\"Connections__unreadconnections\" key={ind}>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={unreadconnection.avatarUrl}\r\n                      alt={unreadconnection.displayname}\r\n                    />\r\n                    <h5>{unreadconnection.email}</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-success\"\r\n                      name=\"accept\"\r\n                      onClick={() => {\r\n                        acceptConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Accept\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-danger\"\r\n                      name=\"reject\"\r\n                      onClick={() => {\r\n                        rejectConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connections;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js",["177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Emails.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport DateFormat from \"dateformat\";\r\nimport DeleteMessageModal from \"./DeleteMessageModal\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst Emails = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [active, setActive] = useState(-1);\r\n  const [connectionEmail, setConnectionEmail] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [emailMessages, setEmailMessages] = useState(\r\n    location.state.emailMessages\r\n  );\r\n  const [deleteMessageModal, setDeleteMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n    email: user.email,\r\n    connectionemail: connectionEmail,\r\n    subject: subject,\r\n  });\r\n\r\n  //Effects\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"http://localhost:4201\");\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = connections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setConnections(newConnections);\r\n    });\r\n\r\n    socket.on(\"emails__newemail\", (data) => {\r\n      if (\r\n        (user.email == data.senderemail || user.email == data.receiveremail) &&\r\n        (connectionEmail == data.senderemail ||\r\n          connectionEmail == data.receiveremail)\r\n      ) {\r\n        history.replace({\r\n          ...history.location,\r\n          state: {\r\n            ...location.state,\r\n            emailMessages: [...emailMessages, { ...data }],\r\n          },\r\n        });\r\n        setEmailMessages([...emailMessages, { ...data }]);\r\n      }\r\n    });\r\n\r\n    socket.on(\"emails__deleteemail\", (data) => {\r\n      const newEmails = emailMessages.filter((row) => row._id !== data._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, emailMessages: newEmails },\r\n      });\r\n      setEmailMessages(newEmails);\r\n    });\r\n\r\n    socket.on(\"emails__delayedemails\", (data) => {\r\n      const newMessages = data.delayedEmails.filter((message) => {\r\n        return (\r\n          (user.email === message.senderemail ||\r\n            user.email === message.receiveremail) &&\r\n          (connectionEmail === message.senderemail ||\r\n            connectionEmail === message.receiveremail)\r\n        );\r\n      });\r\n      setEmailMessages([...emailMessages, ...newMessages]);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      focusLastDiv();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const fetchEmails = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchallemails\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setEmailMessages(response.data.emailMessages);\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n  };\r\n\r\n  const sendEmailHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message Body...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      text: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      date: date,\r\n      time: time,\r\n      subject: subject,\r\n    };\r\n    await axios.post(\"/sendemail\", data);\r\n    setMessage(\"\");\r\n    setSubject(\"\");\r\n  };\r\n\r\n  const sendDelayEmailHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setTimerModal({\r\n      isShown: true,\r\n      message: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      subject: subject,\r\n    });\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"Emails__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Emails\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".Emails__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"Emails__container\">\r\n        <div className=\"Emails__sidebar w-100 \">\r\n          {connections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                id={\"connection\" + ind}\r\n                className={`DirectMessages__connections `}\r\n                onClick={() => {\r\n                  if (active != -1) {\r\n                    $(\"#connection\" + active).removeClass(\r\n                      \"DirectMessages__connections_active\"\r\n                    );\r\n                  }\r\n                  setActive(ind);\r\n                  $(\"#connection\" + ind).addClass(\r\n                    \"DirectMessages__connections_active\"\r\n                  );\r\n\r\n                  setConnectionEmail(connection.email);\r\n\r\n                  fetchEmails(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"Emails__chat w-100 \">\r\n          <div className=\"Emails__chatarea\">\r\n            {emailMessages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div\r\n                    className=\"col\"\r\n                    onClick={() => {\r\n                      setDeleteMessageModal({\r\n                        isShown: true,\r\n                        message: message,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <p\r\n                      className={`DirectMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                    >\r\n                      Subject:\r\n                      <br />\r\n                      {message.subject}\r\n                      <br />\r\n                      <br />\r\n                      Body:\r\n                      <br />\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"Emails__inputarea\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  disabled={true}\r\n                  value={connectionEmail}\r\n                  onChange={(e) => {\r\n                    setConnectionEmail(e.target.value);\r\n                  }}\r\n                  className=\"form-control customform\"\r\n                  placeholder=\"Enter Recipient Email\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n              <div className=\"col\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control customform\"\r\n                  placeholder=\"Enter Subject\"\r\n                  name=\"subject\"\r\n                  value={subject}\r\n                  onChange={(e) => {\r\n                    setSubject(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n              <div className=\"col\">\r\n                <textarea\r\n                  name=\"message\"\r\n                  value={message}\r\n                  onChange={(e) => {\r\n                    setMessage(e.target.value);\r\n                  }}\r\n                  class=\"form-control customform\"\r\n                  placeholder=\"Enter message to be sent...\"\r\n                  rows=\"3\"\r\n                ></textarea>\r\n                <i class=\"fa fa-paper-plane\" onClick={sendEmailHandler}></i>\r\n                <i class=\"fa fa-clock-o\" onClick={sendDelayEmailHandler}></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        subject={timermodal.subject}\r\n        setSubject={setSubject}\r\n        email={timermodal.email}\r\n        connectionemail={timermodal.connectionemail}\r\n      />\r\n      <DeleteMessageModal\r\n        isShown={deleteMessageModal.isShown}\r\n        setIsShown={setDeleteMessageModal}\r\n        message={deleteMessageModal.message}\r\n        messages={emailMessages}\r\n        setMessages={setEmailMessages}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Emails;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport \"./GroupMessages.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport DateFormat from \"dateformat\";\r\n\r\n//Modals\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport CreateGroupModal from \"./Modals/CreateGroupModal\";\r\nimport DeleteGroupModal from \"./Modals/DeleteGroupModal\";\r\nimport AddMembersModal from \"./Modals/AddMembersModal\";\r\nimport RemoveMembersModal from \"./Modals/RemoveMembersModal\";\r\nimport MakeAdminsModal from \"./Modals/MakeAdminsModal\";\r\nimport RemoveAdminsModal from \"./Modals/RemoveAdminsModal\";\r\nimport GroupInfoModal from \"./Modals/GroupInfoModal\";\r\nimport DeleteMessageModal from \"./DeleteMessageModal\";\r\nimport UpdateMessageModal from \"./UpdateMessageModal\";\r\n\r\nconst GroupMessages = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n  var editbutton = undefined;\r\n  var deletebutton = undefined;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [groups, setGroups] = useState(location.state.groups);\r\n  const [activeGroup, setActiveGroup] = useState({});\r\n  const [active, setActive] = useState(\r\n    location.state.active !== undefined ? location.state.active : -1\r\n  );\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState(location.state.allMessages);\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n  });\r\n  const [createGroupModal, setCreateGroupModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [deleteGroupModal, setDeleteGroupModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [addMembersModal, setAddMembersModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [removeMembersModal, setRemoveMembersModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [makeAdminsModal, setMakeAdminsModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [removeAdminsModal, setRemoveAdminsModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [groupInfoModal, setGroupInfoModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [deleteMessageModal, setDeleteMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [updateMessageModal, setUpdateMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    if (active != -1) {\r\n      setActiveGroup(location.state.activeGroup);\r\n      $(\"#connection\" + active).addClass(\"GroupMessages__connections_active\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"http://localhost:4201\");\r\n\r\n    socket.on(\"groupmessages__newgroup\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isMember = data.members.some((member) => {\r\n          return member.email === user.email;\r\n        });\r\n\r\n        if (isMember) {\r\n          var groupExists = groups.some(\r\n            (group) => group._id === data._id && group.name === data.name\r\n          );\r\n          var newGroups = [];\r\n          if (groupExists) {\r\n            newGroups = groups.map((group) => {\r\n              if (group._id === data._id && group.name === data.name) {\r\n                group.members = data.members;\r\n              }\r\n              return group;\r\n            });\r\n          } else {\r\n            newGroups = [...groups, data];\r\n          }\r\n          history.replace({\r\n            ...history.location,\r\n            state: { ...location.state, groups: newGroups },\r\n          });\r\n          setGroups(newGroups);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__deletegroup\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isMember = groups.some((group) => {\r\n          return group._id === data._id && group.name === data.name;\r\n        });\r\n        if (isMember) {\r\n          var newGroups = groups.filter((group) => {\r\n            return !(group._id === data._id && group.name === data.name);\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: {\r\n              ...location.state,\r\n              active: -1,\r\n              activeGroup: {},\r\n              groups: newGroups,\r\n              allMessages: [],\r\n            },\r\n          });\r\n          setGroups(newGroups);\r\n          setActive(-1);\r\n          setActiveGroup({});\r\n          setMessages([]);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__removemembers\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isPartOfRemovedGroup = groups.some((group) => {\r\n          return (\r\n            group._id === data._id &&\r\n            group.name === data.name &&\r\n            !data.members.some((member) => member.email === user.email)\r\n          );\r\n        });\r\n\r\n        if (isPartOfRemovedGroup) {\r\n          var newGroups = groups.filter((group) => {\r\n            return !(group._id === data._id && group.name === data.name);\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: {\r\n              ...location.state,\r\n              active: -1,\r\n              activeGroup: {},\r\n              groups: newGroups,\r\n              allMessages: [],\r\n            },\r\n          });\r\n          setGroups(newGroups);\r\n          setActive(-1);\r\n          setActiveGroup({});\r\n          setMessages([]);\r\n        } else {\r\n          var newGroups = groups.map((group) => {\r\n            if (group._id === data._id && group.name === data.name) {\r\n              group.members = data.members;\r\n            }\r\n            return group;\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: { ...location.state, groups: newGroups },\r\n          });\r\n          setGroups(newGroups);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__makeadmins\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var newGroups = groups.map((group) => {\r\n          if (group._id === data._id && group.name === data.name) {\r\n            group.admin = data.admin;\r\n          }\r\n          return group;\r\n        });\r\n\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, groups: newGroups },\r\n        });\r\n        setGroups(newGroups);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__removeadmins\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var newGroups = groups.map((group) => {\r\n          if (group._id === data._id && group.name === data.name) {\r\n            group.admin = data.admin;\r\n          }\r\n          return group;\r\n        });\r\n\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, groups: newGroups },\r\n        });\r\n        setGroups(newGroups);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__deletemessage\", (data) => {\r\n      const newMessages = messages.filter((row) => row._id !== data._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"groupmessages__updatemessage\", (data) => {\r\n      const newMessages = messages.map((row) => {\r\n        if (row._id === data.message._id) {\r\n          row.text = data.message.text;\r\n        }\r\n        return row;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"groupmessages__newmessage\", (data) => {\r\n      if (activeGroup._id == data._id && activeGroup.name == data.name) {\r\n        setMessages([\r\n          ...messages,\r\n          {\r\n            text: data.text,\r\n            displayname: data.displayname,\r\n            senderemail: data.senderemail,\r\n            avatarUrl: data.avatarUrl,\r\n            date: data.date,\r\n            time: data.time,\r\n            _id: data.messageid,\r\n          },\r\n        ]);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__delayedmessages\", (data) => {\r\n      if (activeGroup._id === data._id && activeGroup.name === data.name) {\r\n        const newMessages = data.delayedMessages;\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, allMessages: newMessages },\r\n        });\r\n        setMessages([...messages, ...newMessages]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      focusLastDiv();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const addHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.add(\"GroupMessages__message_hover\");\r\n      editbutton.classList.remove(\"GroupMessages__message_non_hover\");\r\n      deletebutton.classList.add(\"GroupMessages__message_hover\");\r\n      deletebutton.classList.remove(\"GroupMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"GroupMessages__message_hover\");\r\n      editbutton.classList.add(\"GroupMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"GroupMessages__message_hover\");\r\n      deletebutton.classList.add(\"GroupMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const isGroupClicked = () => {\r\n    if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n      setModal({\r\n        isShown: true.valueOf,\r\n        ModalTitle: \"Choose a group...\",\r\n        ModalBody: \"Please click on a group to delete...\",\r\n      });\r\n      setTimeout(() => {\r\n        setModal({ ...modal, isShown: false });\r\n      }, 1500);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const fetchGroupChat = async (group) => {\r\n    const response = await axios.post(\"/fetchallgroupmessages\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    setMessages(response.data.allMessages);\r\n\r\n    await axios.post(\"/groupmessagesseen\", {\r\n      email: user.email,\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n    });\r\n  };\r\n\r\n  const sendMessageHandler = async () => {\r\n    if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Group...\",\r\n        ModalBody: \"Please Choose a Group to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      groupid: activeGroup._id,\r\n      groupname: activeGroup.name,\r\n      text: message,\r\n      displayname: user.displayname,\r\n      senderemail: user.email,\r\n      avatarUrl: user.avatarUrl,\r\n      date: date,\r\n      time: time,\r\n    };\r\n\r\n    await axios.post(\"/sendgroupmessage\", data);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"GroupMessages__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"GroupMessages\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".GroupMessages__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"GroupMessages__container\">\r\n        <div className=\"GroupMessages__sidebar w-100 \">\r\n          <div className=\"GroupMessages__sidebar_top\">\r\n            {groups.map((group, ind) => {\r\n              return (\r\n                <div\r\n                  id={\"connection\" + ind}\r\n                  className={`GroupMessages__connections `}\r\n                  onClick={() => {\r\n                    if (active != -1) {\r\n                      $(\"#connection\" + active).removeClass(\r\n                        \"GroupMessages__connections_active\"\r\n                      );\r\n                    }\r\n                    setActive(ind);\r\n                    setActiveGroup(group);\r\n\r\n                    $(\"#connection\" + ind).addClass(\r\n                      \"GroupMessages__connections_active\"\r\n                    );\r\n\r\n                    fetchGroupChat(group);\r\n                  }}\r\n                  key={ind}\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <img src={group.pictureUrl} alt={\".\"} />\r\n                      <h5>{group.name}</h5>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                      <i\r\n                        className=\"fa fa-info-circle GroupMessages__info_button\"\r\n                        onClick={() => {\r\n                          setActive(ind);\r\n                          setActiveGroup(group);\r\n                          setGroupInfoModal({\r\n                            isShown: true,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"GroupMessages__sidebar_bottom\">\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"creategroup\"\r\n                  onClick={(e) => {\r\n                    setCreateGroupModal({\r\n                      isShown: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  Create Group\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"deletegroup\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setDeleteGroupModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Delete Group\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"addmembers\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setAddMembersModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Add Members\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"removemembers\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setRemoveMembersModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Remove Members\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"makeadmins\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setMakeAdminsModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Make Admins\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"removeadmins\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setRemoveAdminsModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Remove Admins\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"GroupMessages__chat w-100 \">\r\n          <div className=\"GroupMessages__chatarea\">\r\n            {messages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`GroupMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                      onMouseEnter={(e) => {\r\n                        editbutton = e.target.children[0];\r\n                        deletebutton = e.target.children[1];\r\n                        addHoverClass();\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        removeHoverClass();\r\n                      }}\r\n                    >\r\n                      <i\r\n                        class=\"fa fa-pencil-square-o GroupMessages__edit_button GroupMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setUpdateMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                      <i\r\n                        class=\"fa fa-trash GroupMessages__delete_button GroupMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setDeleteMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`GroupMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.displayname} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.displayname} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"GroupMessages__inputarea\">\r\n            <input\r\n              class=\"form-control customform\"\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode == 13) {\r\n                  sendMessageHandler();\r\n                }\r\n              }}\r\n            />\r\n            <i class=\"fa fa-paper-plane\" onClick={sendMessageHandler}></i>\r\n            <i\r\n              class=\"fa fa-clock-o\"\r\n              onClick={() => {\r\n                if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Choose a Group...\",\r\n                    ModalBody: \"Please Choose a Group to chat with...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (message === \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Type a Message...\",\r\n                    ModalBody: \"Please type something to send...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                setTimerModal({\r\n                  isShown: true,\r\n                  message: message,\r\n                  email: user.email,\r\n                  group: activeGroup,\r\n                });\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        user={user}\r\n        group={activeGroup}\r\n      />\r\n      <CreateGroupModal\r\n        isShown={createGroupModal.isShown}\r\n        setIsShown={setCreateGroupModal}\r\n        user={user}\r\n      />\r\n      <DeleteGroupModal\r\n        isShown={deleteGroupModal.isShown}\r\n        setIsShown={setDeleteGroupModal}\r\n        group={activeGroup}\r\n        user={user}\r\n      />\r\n      <AddMembersModal\r\n        isShown={addMembersModal.isShown}\r\n        setIsShown={setAddMembersModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <RemoveMembersModal\r\n        isShown={removeMembersModal.isShown}\r\n        setIsShown={setRemoveMembersModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <MakeAdminsModal\r\n        isShown={makeAdminsModal.isShown}\r\n        setIsShown={setMakeAdminsModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <RemoveAdminsModal\r\n        isShown={removeAdminsModal.isShown}\r\n        setIsShown={setRemoveAdminsModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n\r\n      <GroupInfoModal\r\n        isShown={groupInfoModal.isShown}\r\n        setIsShown={setGroupInfoModal}\r\n        group={activeGroup}\r\n      />\r\n      <UpdateMessageModal\r\n        isShown={updateMessageModal.isShown}\r\n        setIsShown={setUpdateMessageModal}\r\n        message={updateMessageModal.message}\r\n        editbutton={updateMessageModal.editbutton}\r\n        deletebutton={updateMessageModal.deletebutton}\r\n        senderemail={user.email}\r\n        group={activeGroup}\r\n      />\r\n      <DeleteMessageModal\r\n        isShown={deleteMessageModal.isShown}\r\n        setIsShown={setDeleteMessageModal}\r\n        message={deleteMessageModal.message}\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        group={activeGroup}\r\n        editbutton={deleteMessageModal.editbutton}\r\n        deletebutton={deleteMessageModal.deletebutton}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupMessages;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js",["206"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst CreateGroupModal = ({ isShown, setIsShown, user }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const createGroupHandler = async () => {\r\n    if (groupName === \"\") {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Name Empty!!!\",\r\n        ModalBody: \"Please enter a valid Group Name\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          ...resultModal,\r\n          isShown: false,\r\n        });\r\n      }, 2000);\r\n    }\r\n\r\n    const response = await axios.post(\"/creategroup\", {\r\n      groupname: groupName,\r\n      imageurl: imageURL,\r\n      user: user,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: \"Success!!\",\r\n      ModalBody: \"New Group created successfully\",\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 1500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n    setImageURL(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Create Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Name</h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Picture URL </h5>\r\n          <input\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control\"\r\n            type=\"url\"\r\n            name=\"imageurl\"\r\n            onChange={(e) => {\r\n              setImageURL(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={createGroupHandler}\r\n          >\r\n            Create Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CreateGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js",["207"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst DeleteGroupModal = ({ isShown, setIsShown, user, group }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/deletegroup\", {\r\n        groupid: group._id,\r\n        groupname: groupName,\r\n        email: user.email,\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Deleted...\",\r\n        ModalBody: \"You have successfully deleted the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to delete the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>\r\n            Please type the following text <br />\r\n            <b style={{ color: \"red\" }}>{group.name}</b>\r\n            <br /> to confirm deletion...\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={group.name !== groupName}\r\n            onClick={deleteGroupHandler}\r\n          >\r\n            Delete Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default DeleteGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js",["208","209"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst AddMembersModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const addMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/addmembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Added...\",\r\n        ModalBody: \"Add the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to add members to the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Add Members to <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={addMembersHandler}\r\n          >\r\n            Add Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default AddMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js",["210","211"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveMembersModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removemembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Removed...\",\r\n        ModalBody: \"Removed the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to remove members to the group...Check whether you are trying to cremove the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Remove Members from <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeMembersHandler}\r\n          >\r\n            Remove Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js",["212","213"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst MakeAdminsModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const makeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/makeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Members to Admins in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={makeAdminsHandler}\r\n          >\r\n            Make Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default MakeAdminsModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js",["214","215"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveAdminsModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Admins to Members in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeAdminsHandler}\r\n          >\r\n            Remove Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveAdminsModal;\r\n",["216","217"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\GroupInfoModal.js",["218","219","220"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst GroupInfoModal = ({ isShown, setIsShown, group }) => {\r\n  //States\r\n  const [showAdmin, setShowAdmin] = useState(false);\r\n  const [showMembers, setShowMembers] = useState(false);\r\n  const [admins, setAdmins] = useState([]);\r\n\r\n  //Handlers\r\n  const chooseRoleHandler = (option) => {\r\n    if (option === \"admins\") {\r\n      if (JSON.stringify(group) !== JSON.stringify({})) {\r\n        var completeAdmins = group.members.filter((member) => {\r\n          return group.admin.some((row) => row.email === member.email);\r\n        });\r\n        setAdmins(completeAdmins);\r\n      }\r\n      setShowAdmin(true);\r\n      setShowMembers(false);\r\n    } else if (option === \"members\") {\r\n      setShowAdmin(false);\r\n      setShowMembers(true);\r\n    } else {\r\n      setShowAdmin(false);\r\n      setShowMembers(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n    setShowAdmin(false);\r\n    setShowMembers(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>{group.name}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <img\r\n                src={group.pictureUrl}\r\n                style={{\r\n                  width: \"30vh\",\r\n                  height: \"30vh\",\r\n                  borderRadius: \"100%\",\r\n                  display: \"block\",\r\n                  marginLeft: \"auto\",\r\n                  marginRight: \"auto\",\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <div className=\"col\">\r\n              <div className=\"input-group\">\r\n                <div\r\n                  className=\"input-group-prepend\"\r\n                  style={{\r\n                    borderRight: \"1px solid white\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    className=\"input-group-text\"\r\n                    style={{\r\n                      backgroundColor: \"#5d001e\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    Owner\r\n                  </span>\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control GroupMessages__info_owner\"\r\n                  value={group.owner}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <div className=\"col\">\r\n              <select\r\n                class=\"form-control GroupMessages__info_select\"\r\n                style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n                onChange={(e) => {\r\n                  chooseRoleHandler(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"default\" selected>\r\n                  Choose a role to view members\r\n                </option>\r\n                <option value=\"admins\">Admins</option>\r\n                <option value=\"members\">Members</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {showAdmin ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {admins.map((admin) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={admin.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{admin.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{admin.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {showMembers ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {group.members.map((member) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={member.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{member.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{member.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default GroupInfoModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DeleteMessageModal.js",["221","222"],"import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst DeleteMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  messages,\r\n  setMessages,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const deleteMessageHandler = async () => {\r\n    await axios.post(\"/deletedirectmessage\", { message: message });\r\n    const updatedMessages = messages.filter((row) => row._id !== message._id);\r\n    history.replace({\r\n      ...history.location,\r\n      state: { ...location.state, allMessages: updatedMessages },\r\n    });\r\n    setMessages(updatedMessages);\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>\r\n            Are you sure you want to delete the message?\r\n          </h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={deleteMessageHandler}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default DeleteMessageModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\DeleteMessageModal.js",["223","224"],"import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst DeleteMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  messages,\r\n  setMessages,\r\n  editbutton,\r\n  deletebutton,\r\n  group,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const deleteMessageHandler = async () => {\r\n    await axios.post(\"/deletegroupmessage\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      messageid: message._id,\r\n    });\r\n    const updatedMessages = messages.filter((row) => row._id !== message._id);\r\n    history.replace({\r\n      ...history.location,\r\n      state: { ...location.state, allMessages: updatedMessages },\r\n    });\r\n    setMessages(updatedMessages);\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--templateColor1)\",\r\n            color: \"var(--logoTextColor)\",\r\n            textShadow: \"2px 2px var(--logoBgColor)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--templateColor1)\" }}>\r\n            Are you sure you want to delete the message?\r\n          </h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={deleteMessageHandler}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default DeleteMessageModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\DeleteMessageModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\UpdateMessageModal.js",["225","226","227","228"],"import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst UpdateMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  editbutton,\r\n  deletebutton,\r\n  connectionemail,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const updateMessageHandler = async () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n\r\n    await axios.post(\"/updatedirectmessage\", {\r\n      message: message,\r\n      newmessage: newMessage,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setNewMessage(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--templateColor1)\",\r\n            color: \"var(--logoTextColor)\",\r\n            textShadow: \"2px 2px var(--logoBgColor)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Update the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h4>Enter the updated message: </h4>\r\n          <b style={{ padding: \"2%\" }}>\r\n            {typeof message === \"object\" ? message.text : \"\"}\r\n          </b>\r\n          <hr />\r\n          <input\r\n            type=\"text\"\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n            }}\r\n            class=\"form-control\"\r\n            placeholder=\"Enter New Message.\"\r\n            value={newMessage}\r\n            onChange={(e) => {\r\n              setNewMessage(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={updateMessageHandler}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default UpdateMessageModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\UpdateMessageModal.js",["229","230","231","232"],"import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst UpdateMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  editbutton,\r\n  deletebutton,\r\n  senderemail,\r\n  group,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const updateMessageHandler = async () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n\r\n    await axios.post(\"/updategroupmessage\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      message: message,\r\n      newmessage: newMessage,\r\n      senderemail: senderemail,\r\n    });\r\n    setNewMessage(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--templateColor1)\",\r\n            color: \"var(--logoTextColor)\",\r\n            textShadow: \"2px 2px var(--logoBgColor)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Update the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h4>Enter the updated message: </h4>\r\n          <b style={{ padding: \"2%\" }}>\r\n            {typeof message === \"object\" ? message.text : \"\"}\r\n          </b>\r\n          <hr />\r\n          <input\r\n            type=\"text\"\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n            }}\r\n            class=\"form-control\"\r\n            placeholder=\"Enter New Message.\"\r\n            value={newMessage}\r\n            onChange={(e) => {\r\n              setNewMessage(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={updateMessageHandler}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default UpdateMessageModal;\r\n",{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":25},{"ruleId":"237","severity":1,"message":"241","line":1,"column":27,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":11,"column":10,"nodeType":"244","messageId":"245","endLine":11,"endColumn":12},{"ruleId":"246","severity":1,"message":"247","line":106,"column":11,"nodeType":"248","endLine":106,"endColumn":49},{"ruleId":"249","severity":1,"message":"250","line":52,"column":16,"nodeType":"251","messageId":"245","endLine":52,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":55,"column":6,"nodeType":"254","endLine":55,"endColumn":8,"suggestions":"255"},{"ruleId":"249","severity":1,"message":"256","line":97,"column":21,"nodeType":"251","messageId":"245","endLine":97,"endColumn":23},{"ruleId":"249","severity":1,"message":"256","line":97,"column":55,"nodeType":"251","messageId":"245","endLine":97,"endColumn":57},{"ruleId":"249","severity":1,"message":"256","line":98,"column":26,"nodeType":"251","messageId":"245","endLine":98,"endColumn":28},{"ruleId":"249","severity":1,"message":"256","line":99,"column":27,"nodeType":"251","messageId":"245","endLine":99,"endColumn":29},{"ruleId":"249","severity":1,"message":"256","line":166,"column":25,"nodeType":"251","messageId":"245","endLine":166,"endColumn":27},{"ruleId":"249","severity":1,"message":"250","line":221,"column":30,"nodeType":"251","messageId":"245","endLine":221,"endColumn":32},{"ruleId":"249","severity":1,"message":"256","line":258,"column":45,"nodeType":"251","messageId":"245","endLine":258,"endColumn":47},{"ruleId":"249","severity":1,"message":"256","line":296,"column":42,"nodeType":"251","messageId":"245","endLine":296,"endColumn":44},{"ruleId":"249","severity":1,"message":"256","line":300,"column":49,"nodeType":"251","messageId":"245","endLine":300,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":309,"column":49,"nodeType":"251","messageId":"245","endLine":309,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":321,"column":49,"nodeType":"251","messageId":"245","endLine":321,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":330,"column":49,"nodeType":"251","messageId":"245","endLine":330,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":354,"column":31,"nodeType":"251","messageId":"245","endLine":354,"endColumn":33},{"ruleId":"249","severity":1,"message":"256","line":363,"column":37,"nodeType":"251","messageId":"245","endLine":363,"endColumn":39},{"ruleId":"252","severity":1,"message":"257","line":26,"column":6,"nodeType":"254","endLine":26,"endColumn":8,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":129,"column":13,"nodeType":"248","endLine":129,"endColumn":72},{"ruleId":"261","severity":1,"message":"262","line":130,"column":15,"nodeType":"248","endLine":139,"endColumn":17},{"ruleId":"237","severity":1,"message":"263","line":9,"column":20,"nodeType":"239","messageId":"240","endLine":9,"endColumn":28},{"ruleId":"237","severity":1,"message":"264","line":17,"column":28,"nodeType":"239","messageId":"240","endLine":17,"endColumn":47},{"ruleId":"237","severity":1,"message":"265","line":20,"column":22,"nodeType":"239","messageId":"240","endLine":20,"endColumn":35},{"ruleId":"266","severity":1,"message":"267","line":92,"column":9,"nodeType":"239","messageId":"268","endLine":92,"endColumn":24},{"ruleId":"249","severity":1,"message":"250","line":93,"column":16,"nodeType":"251","messageId":"245","endLine":93,"endColumn":18},{"ruleId":"249","severity":1,"message":"250","line":126,"column":16,"nodeType":"251","messageId":"245","endLine":126,"endColumn":18},{"ruleId":"237","severity":1,"message":"263","line":9,"column":20,"nodeType":"239","messageId":"240","endLine":9,"endColumn":28},{"ruleId":"249","severity":1,"message":"256","line":25,"column":20,"nodeType":"251","messageId":"245","endLine":25,"endColumn":22},{"ruleId":"249","severity":1,"message":"256","line":54,"column":20,"nodeType":"251","messageId":"245","endLine":54,"endColumn":22},{"ruleId":"237","severity":1,"message":"269","line":76,"column":11,"nodeType":"239","messageId":"240","endLine":76,"endColumn":19},{"ruleId":"249","severity":1,"message":"250","line":81,"column":34,"nodeType":"251","messageId":"245","endLine":81,"endColumn":36},{"ruleId":"237","severity":1,"message":"269","line":93,"column":11,"nodeType":"239","messageId":"240","endLine":93,"endColumn":19},{"ruleId":"249","severity":1,"message":"250","line":99,"column":34,"nodeType":"251","messageId":"245","endLine":99,"endColumn":36},{"ruleId":"249","severity":1,"message":"256","line":61,"column":21,"nodeType":"251","messageId":"245","endLine":61,"endColumn":23},{"ruleId":"249","severity":1,"message":"256","line":61,"column":55,"nodeType":"251","messageId":"245","endLine":61,"endColumn":57},{"ruleId":"249","severity":1,"message":"256","line":62,"column":26,"nodeType":"251","messageId":"245","endLine":62,"endColumn":28},{"ruleId":"249","severity":1,"message":"256","line":63,"column":27,"nodeType":"251","messageId":"245","endLine":63,"endColumn":29},{"ruleId":"249","severity":1,"message":"256","line":119,"column":25,"nodeType":"251","messageId":"245","endLine":119,"endColumn":27},{"ruleId":"249","severity":1,"message":"256","line":154,"column":25,"nodeType":"251","messageId":"245","endLine":154,"endColumn":27},{"ruleId":"249","severity":1,"message":"250","line":204,"column":30,"nodeType":"251","messageId":"245","endLine":204,"endColumn":32},{"ruleId":"249","severity":1,"message":"256","line":249,"column":45,"nodeType":"251","messageId":"245","endLine":249,"endColumn":47},{"ruleId":"249","severity":1,"message":"256","line":263,"column":42,"nodeType":"251","messageId":"245","endLine":263,"endColumn":44},{"ruleId":"249","severity":1,"message":"256","line":267,"column":49,"nodeType":"251","messageId":"245","endLine":267,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":276,"column":49,"nodeType":"251","messageId":"245","endLine":276,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":288,"column":49,"nodeType":"251","messageId":"245","endLine":288,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":297,"column":49,"nodeType":"251","messageId":"245","endLine":297,"endColumn":51},{"ruleId":"237","severity":1,"message":"270","line":30,"column":23,"nodeType":"239","messageId":"240","endLine":30,"endColumn":37},{"ruleId":"249","severity":1,"message":"250","line":80,"column":16,"nodeType":"251","messageId":"245","endLine":80,"endColumn":18},{"ruleId":"252","severity":1,"message":"271","line":84,"column":6,"nodeType":"254","endLine":84,"endColumn":8,"suggestions":"272"},{"ruleId":"266","severity":1,"message":"273","line":177,"column":15,"nodeType":"239","messageId":"268","endLine":177,"endColumn":24},{"ruleId":"249","severity":1,"message":"256","line":251,"column":27,"nodeType":"251","messageId":"245","endLine":251,"endColumn":29},{"ruleId":"249","severity":1,"message":"256","line":251,"column":59,"nodeType":"251","messageId":"245","endLine":251,"endColumn":61},{"ruleId":"249","severity":1,"message":"250","line":396,"column":32,"nodeType":"251","messageId":"245","endLine":396,"endColumn":34},{"ruleId":"249","severity":1,"message":"256","line":545,"column":45,"nodeType":"251","messageId":"245","endLine":545,"endColumn":47},{"ruleId":"249","severity":1,"message":"256","line":583,"column":42,"nodeType":"251","messageId":"245","endLine":583,"endColumn":44},{"ruleId":"249","severity":1,"message":"256","line":587,"column":49,"nodeType":"251","messageId":"245","endLine":587,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":596,"column":49,"nodeType":"251","messageId":"245","endLine":596,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":605,"column":49,"nodeType":"251","messageId":"245","endLine":605,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":617,"column":49,"nodeType":"251","messageId":"245","endLine":617,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":626,"column":49,"nodeType":"251","messageId":"245","endLine":626,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":635,"column":49,"nodeType":"251","messageId":"245","endLine":635,"endColumn":51},{"ruleId":"249","severity":1,"message":"256","line":659,"column":31,"nodeType":"251","messageId":"245","endLine":659,"endColumn":33},{"ruleId":"237","severity":1,"message":"269","line":33,"column":11,"nodeType":"239","messageId":"240","endLine":33,"endColumn":19},{"ruleId":"237","severity":1,"message":"269","line":18,"column":13,"nodeType":"239","messageId":"240","endLine":18,"endColumn":21},{"ruleId":"252","severity":1,"message":"274","line":29,"column":6,"nodeType":"254","endLine":29,"endColumn":8,"suggestions":"275"},{"ruleId":"237","severity":1,"message":"269","line":45,"column":13,"nodeType":"239","messageId":"240","endLine":45,"endColumn":21},{"ruleId":"252","severity":1,"message":"274","line":35,"column":6,"nodeType":"254","endLine":35,"endColumn":8,"suggestions":"276"},{"ruleId":"237","severity":1,"message":"269","line":51,"column":13,"nodeType":"239","messageId":"240","endLine":51,"endColumn":21},{"ruleId":"252","severity":1,"message":"274","line":29,"column":6,"nodeType":"254","endLine":29,"endColumn":8,"suggestions":"277"},{"ruleId":"237","severity":1,"message":"269","line":45,"column":13,"nodeType":"239","messageId":"240","endLine":45,"endColumn":21},{"ruleId":"252","severity":1,"message":"274","line":35,"column":6,"nodeType":"254","endLine":35,"endColumn":8,"suggestions":"278"},{"ruleId":"237","severity":1,"message":"269","line":51,"column":13,"nodeType":"239","messageId":"240","endLine":51,"endColumn":21},{"ruleId":"233","replacedBy":"279"},{"ruleId":"235","replacedBy":"280"},{"ruleId":"261","severity":1,"message":"262","line":61,"column":15,"nodeType":"248","endLine":71,"endColumn":17},{"ruleId":"261","severity":1,"message":"262","line":128,"column":27,"nodeType":"248","endLine":128,"endColumn":56},{"ruleId":"261","severity":1,"message":"262","line":157,"column":27,"nodeType":"248","endLine":157,"endColumn":57},{"ruleId":"237","severity":1,"message":"281","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":18},{"ruleId":"237","severity":1,"message":"282","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":21},{"ruleId":"237","severity":1,"message":"281","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":18},{"ruleId":"237","severity":1,"message":"282","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":21},{"ruleId":"237","severity":1,"message":"281","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":18},{"ruleId":"237","severity":1,"message":"282","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":21},{"ruleId":"237","severity":1,"message":"283","line":17,"column":9,"nodeType":"239","messageId":"240","endLine":17,"endColumn":17},{"ruleId":"237","severity":1,"message":"284","line":18,"column":9,"nodeType":"239","messageId":"240","endLine":18,"endColumn":16},{"ruleId":"237","severity":1,"message":"281","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":18},{"ruleId":"237","severity":1,"message":"282","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":21},{"ruleId":"237","severity":1,"message":"283","line":18,"column":9,"nodeType":"239","messageId":"240","endLine":18,"endColumn":17},{"ruleId":"237","severity":1,"message":"284","line":19,"column":9,"nodeType":"239","messageId":"240","endLine":19,"endColumn":16},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.","ArrayExpression",["287"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.state'. Either include them or remove the dependency array.",["288"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'dispatch' is assigned a value but never used.","'setEmailConnections' is assigned a value but never used.","'setGroupChats' is assigned a value but never used.","no-redeclare","'connectionemail' is already defined.","redeclared","'response' is assigned a value but never used.","'setConnections' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'active' and 'location.state.activeGroup'. Either include them or remove the dependency array.",["289"],"'newGroups' is already defined.","React Hook useEffect has a missing dependency: 'connections'. Either include it or remove the dependency array. If 'setAllMembers' needs the current value of 'connections', you can also switch to useReducer instead of useState and read 'connections' in the reducer.",["290"],["291"],["292"],["293"],["285"],["286"],"'DateFormat' is defined but never used.","'TemplateModal' is defined but never used.","'location' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"300","fix":"302"},{"desc":"300","fix":"303"},{"desc":"300","fix":"304"},"Update the dependencies array to be: [active]",{"range":"305","text":"306"},"Update the dependencies array to be: [dispatch, history, location.state]",{"range":"307","text":"308"},"Update the dependencies array to be: [active, location.state.activeGroup]",{"range":"309","text":"310"},"Update the dependencies array to be: [connections]",{"range":"311","text":"312"},{"range":"313","text":"312"},{"range":"314","text":"312"},{"range":"315","text":"312"},[1814,1816],"[active]",[767,769],"[dispatch, history, location.state]",[2832,2834],"[active, location.state.activeGroup]",[868,870],"[connections]",[888,890],[868,870],[887,889]]