[{"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js":"1","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js":"2","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js":"3","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js":"4","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js":"5","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js":"6","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js":"7","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js":"8","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js":"9","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js":"10","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js":"11","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js":"12","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js":"13","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js":"14","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js":"15","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js":"16","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js":"17","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js":"18","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js":"19","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js":"20","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js":"21","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js":"22","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js":"23"},{"size":418,"mtime":1610933324659,"results":"24","hashOfConfig":"25"},{"size":297,"mtime":1616902717354,"results":"26","hashOfConfig":"25"},{"size":1678,"mtime":1616907755626,"results":"27","hashOfConfig":"25"},{"size":3201,"mtime":1617014009011,"results":"28","hashOfConfig":"25"},{"size":10365,"mtime":1617008026861,"results":"29","hashOfConfig":"25"},{"size":693,"mtime":1610886576089,"results":"30","hashOfConfig":"25"},{"size":425,"mtime":1610930046244,"results":"31","hashOfConfig":"25"},{"size":488,"mtime":1610968041436,"results":"32","hashOfConfig":"25"},{"size":4123,"mtime":1617013921206,"results":"33","hashOfConfig":"25"},{"size":9140,"mtime":1617013980353,"results":"34","hashOfConfig":"25"},{"size":6288,"mtime":1616903359680,"results":"35","hashOfConfig":"25"},{"size":1094,"mtime":1610962016607,"results":"36","hashOfConfig":"25"},{"size":11175,"mtime":1616903365748,"results":"37","hashOfConfig":"25"},{"size":3570,"mtime":1616902199413,"results":"38","hashOfConfig":"25"},{"size":3654,"mtime":1611326250563,"results":"39","hashOfConfig":"25"},{"size":20728,"mtime":1617031129429,"results":"40","hashOfConfig":"25"},{"size":3591,"mtime":1617023441557,"results":"41","hashOfConfig":"25"},{"size":3562,"mtime":1616993728307,"results":"42","hashOfConfig":"25"},{"size":3327,"mtime":1617005129690,"results":"43","hashOfConfig":"25"},{"size":4258,"mtime":1617005227195,"results":"44","hashOfConfig":"25"},{"size":4374,"mtime":1617005289005,"results":"45","hashOfConfig":"25"},{"size":4291,"mtime":1617005643543,"results":"46","hashOfConfig":"25"},{"size":4320,"mtime":1617005763704,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"5ivkir",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js",[],["103","104"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js",["105","106"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js",["123","124"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js",["125","126","127"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js",["128","129","130","131","132","133","134"],"import React, { useState } from \"react\";\r\nimport \"./Connections.css\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst Connections = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [connectionemail, setConnectionEmail] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [unreadConnections, setUnreadConnections] = useState(\r\n    location.state.unreadconnections\r\n  );\r\n\r\n  const addConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOLðŸ˜‚\",\r\n        ModalBody: \"You can't send a connection request to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post(\"/addconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const removeConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOLðŸ˜‚\",\r\n        ModalBody: \"You can't remove a connection to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const acceptConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/acceptconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  const rejectConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Connections\">\r\n      <div className=\"Connections__addconnections\">\r\n        <h1>Alter Connections</h1>\r\n        <div className=\"Connections__addconnections_body\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h3>Enter Email ID</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={connectionemail}\r\n                onChange={(e) => {\r\n                  setConnectionEmail(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={addConnectionHandler}\r\n              >\r\n                Send Connection Request\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={removeConnectionHandler}\r\n              >\r\n                Remove Connection\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Connections__incomingconnections\">\r\n        <h1>Connections Requests</h1>\r\n        <div className=\"Connections__incomingconnections_body\">\r\n          {unreadConnections.map((unreadconnection, ind) => {\r\n            return (\r\n              <div className=\"Connections__unreadconnections\" key={ind}>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={unreadconnection.avatarUrl}\r\n                      alt={unreadconnection.displayname}\r\n                    />\r\n                    <h5>{unreadconnection.email}</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-success\"\r\n                      name=\"accept\"\r\n                      onClick={() => {\r\n                        acceptConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Accept\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-danger\"\r\n                      name=\"reject\"\r\n                      onClick={() => {\r\n                        rejectConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connections;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Pusher from \"pusher-js\";\r\nimport \"./Emails.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport DateFormat from \"dateformat\";\r\n\r\nconst Emails = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [active, setActive] = useState(-1);\r\n  const [connectionEmail, setConnectionEmail] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [emailMessages, setEmailMessages] = useState(\r\n    location.state.emailMessages\r\n  );\r\n\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n    email: user.email,\r\n    connectionemail: connectionEmail,\r\n    subject: subject,\r\n  });\r\n\r\n  //Effects\r\n\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"11a8dd35181269e15a84\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"users\");\r\n\r\n    channel.bind(\"removeconnection\", (data) => {\r\n      const newConnections = connections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      setConnections(newConnections);\r\n    });\r\n  }, [connections]);\r\n\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"11a8dd35181269e15a84\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"emails\");\r\n\r\n    channel.bind(\"newemail\", (data) => {\r\n      if (\r\n        (user.email == data.senderemail || user.email == data.receiveremail) &&\r\n        (connectionEmail == data.senderemail ||\r\n          connectionEmail == data.receiveremail)\r\n      ) {\r\n        setEmailMessages([...emailMessages, { ...data }]);\r\n      }\r\n    });\r\n\r\n    channel.bind(\"delayedemails\", (data) => {\r\n      const newMessages = data.delayedEmails.filter((message) => {\r\n        return (\r\n          (user.email === message.senderemail ||\r\n            user.email === message.receiveremail) &&\r\n          (connectionEmail === message.senderemail ||\r\n            connectionEmail === message.receiveremail)\r\n        );\r\n      });\r\n      setEmailMessages([...emailMessages, ...newMessages]);\r\n    });\r\n\r\n    return () => {\r\n      channel.unbind_all();\r\n      channel.unsubscribe();\r\n      focusLastDiv();\r\n    };\r\n  }, [emailMessages]);\r\n\r\n  //Handlers\r\n  const fetchEmails = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchallemails\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setEmailMessages(response.data.emailMessages);\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n  };\r\n\r\n  const sendEmailHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message Body...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      text: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      date: date,\r\n      time: time,\r\n      subject: subject,\r\n    };\r\n    await axios.post(\"/sendemail\", data);\r\n    setMessage(\"\");\r\n    setSubject(\"\");\r\n  };\r\n\r\n  const sendDelayEmailHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setTimerModal({\r\n      isShown: true,\r\n      message: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      subject: subject,\r\n    });\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"Emails__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Emails\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".Emails__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"Emails__container\">\r\n        <div className=\"Emails__sidebar w-100 \">\r\n          {connections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                id={\"connection\" + ind}\r\n                className={`DirectMessages__connections `}\r\n                onClick={() => {\r\n                  if (active != -1) {\r\n                    $(\"#connection\" + active).removeClass(\r\n                      \"DirectMessages__connections_active\"\r\n                    );\r\n                  }\r\n                  setActive(ind);\r\n                  $(\"#connection\" + ind).addClass(\r\n                    \"DirectMessages__connections_active\"\r\n                  );\r\n\r\n                  setConnectionEmail(connection.email);\r\n\r\n                  fetchEmails(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"Emails__chat w-100 \">\r\n          <div className=\"Emails__chatarea\">\r\n            {console.log(emailMessages)}\r\n            {emailMessages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`DirectMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                    >\r\n                      Subject:\r\n                      <br />\r\n                      {message.subject}\r\n                      <br />\r\n                      <br />\r\n                      Body:\r\n                      <br />\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"Emails__inputarea\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  disabled={true}\r\n                  value={connectionEmail}\r\n                  onChange={(e) => {\r\n                    setConnectionEmail(e.target.value);\r\n                  }}\r\n                  className=\"form-control customform\"\r\n                  placeholder=\"Enter Recipient Email\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n              <div className=\"col\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control customform\"\r\n                  placeholder=\"Enter Subject\"\r\n                  name=\"subject\"\r\n                  value={subject}\r\n                  onChange={(e) => {\r\n                    setSubject(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n              <div className=\"col\">\r\n                <textarea\r\n                  name=\"message\"\r\n                  value={message}\r\n                  onChange={(e) => {\r\n                    setMessage(e.target.value);\r\n                  }}\r\n                  class=\"form-control customform\"\r\n                  placeholder=\"Enter message to be sent...\"\r\n                  rows=\"3\"\r\n                ></textarea>\r\n                <i class=\"fa fa-paper-plane\" onClick={sendEmailHandler}></i>\r\n                <i class=\"fa fa-clock-o\" onClick={sendDelayEmailHandler}></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        subject={timermodal.subject}\r\n        setSubject={setSubject}\r\n        email={timermodal.email}\r\n        connectionemail={timermodal.connectionemail}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Emails;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js",["150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js",["168"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst CreateGroupModal = ({ isShown, setIsShown, user }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const createGroupHandler = async () => {\r\n    if (groupName === \"\") {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Name Empty!!!\",\r\n        ModalBody: \"Please enter a valid Group Name\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          ...resultModal,\r\n          isShown: false,\r\n        });\r\n      }, 2000);\r\n    }\r\n\r\n    const response = await axios.post(\"/creategroup\", {\r\n      groupname: groupName,\r\n      imageurl: imageURL,\r\n      user: user,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: \"Success!!\",\r\n      ModalBody: \"New Group created successfully\",\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n    setImageURL(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Create Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Name</h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Picture URL </h5>\r\n          <input\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control\"\r\n            type=\"url\"\r\n            name=\"imageurl\"\r\n            onChange={(e) => {\r\n              setImageURL(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={createGroupHandler}\r\n          >\r\n            Create Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CreateGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js",["169"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst DeleteGroupModal = ({ isShown, setIsShown, user, group }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/deletegroup\", {\r\n        groupid: group._id,\r\n        groupname: groupName,\r\n        email: user.email,\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Deleted...\",\r\n        ModalBody: \"You have successfully deleted the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized âš \",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to delete the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>\r\n            Please type the following text <br />\r\n            <b style={{ color: \"red\" }}>{group.name}</b>\r\n            <br /> to confirm deletion...\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={group.name !== groupName}\r\n            onClick={deleteGroupHandler}\r\n          >\r\n            Delete Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default DeleteGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js",["170","171"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst AddMembersModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const addMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/addmembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Added...\",\r\n        ModalBody: \"Add the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized âš \",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to add members to the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Add Members to <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={addMembersHandler}\r\n          >\r\n            Add Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default AddMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js",["172","173"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveMembersModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removemembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Removed...\",\r\n        ModalBody: \"Removed the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized âš \",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to remove members to the group...Check whether you are trying to cremove the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Remove Members from <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeMembersHandler}\r\n          >\r\n            Remove Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js",["174","175"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst MakeAdminsModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const makeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/makeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized âš \",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Members to Admins in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={makeAdminsHandler}\r\n          >\r\n            Make Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default MakeAdminsModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js",["176","177"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveAdminsModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized âš \",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Admins to Members in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeAdminsHandler}\r\n          >\r\n            Remove Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveAdminsModal;\r\n",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":11,"column":10,"nodeType":"184","messageId":"185","endLine":11,"endColumn":12},{"ruleId":"186","severity":1,"message":"187","line":95,"column":11,"nodeType":"188","endLine":95,"endColumn":49},{"ruleId":"189","severity":1,"message":"190","line":53,"column":6,"nodeType":"191","endLine":53,"endColumn":19,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":64,"column":21,"nodeType":"195","messageId":"185","endLine":64,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":64,"column":55,"nodeType":"195","messageId":"185","endLine":64,"endColumn":57},{"ruleId":"193","severity":1,"message":"194","line":65,"column":26,"nodeType":"195","messageId":"185","endLine":65,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":66,"column":27,"nodeType":"195","messageId":"185","endLine":66,"endColumn":29},{"ruleId":"189","severity":1,"message":"196","line":97,"column":6,"nodeType":"191","endLine":97,"endColumn":16,"suggestions":"197"},{"ruleId":"193","severity":1,"message":"194","line":115,"column":25,"nodeType":"195","messageId":"185","endLine":115,"endColumn":27},{"ruleId":"193","severity":1,"message":"198","line":170,"column":30,"nodeType":"195","messageId":"185","endLine":170,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":207,"column":45,"nodeType":"195","messageId":"185","endLine":207,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":214,"column":42,"nodeType":"195","messageId":"185","endLine":214,"endColumn":44},{"ruleId":"193","severity":1,"message":"194","line":218,"column":49,"nodeType":"195","messageId":"185","endLine":218,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":227,"column":49,"nodeType":"195","messageId":"185","endLine":227,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":239,"column":49,"nodeType":"195","messageId":"185","endLine":239,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":248,"column":49,"nodeType":"195","messageId":"185","endLine":248,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":272,"column":31,"nodeType":"195","messageId":"185","endLine":272,"endColumn":33},{"ruleId":"193","severity":1,"message":"194","line":281,"column":37,"nodeType":"195","messageId":"185","endLine":281,"endColumn":39},{"ruleId":"189","severity":1,"message":"199","line":25,"column":6,"nodeType":"191","endLine":25,"endColumn":8,"suggestions":"200"},{"ruleId":"201","severity":1,"message":"202","line":117,"column":13,"nodeType":"188","endLine":117,"endColumn":72},{"ruleId":"203","severity":1,"message":"204","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":9},{"ruleId":"203","severity":1,"message":"207","line":10,"column":20,"nodeType":"205","messageId":"206","endLine":10,"endColumn":28},{"ruleId":"203","severity":1,"message":"208","line":18,"column":22,"nodeType":"205","messageId":"206","endLine":18,"endColumn":35},{"ruleId":"203","severity":1,"message":"207","line":9,"column":20,"nodeType":"205","messageId":"206","endLine":9,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":25,"column":20,"nodeType":"195","messageId":"185","endLine":25,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":46,"column":20,"nodeType":"195","messageId":"185","endLine":46,"endColumn":22},{"ruleId":"203","severity":1,"message":"209","line":66,"column":11,"nodeType":"205","messageId":"206","endLine":66,"endColumn":19},{"ruleId":"193","severity":1,"message":"198","line":71,"column":34,"nodeType":"195","messageId":"185","endLine":71,"endColumn":36},{"ruleId":"203","severity":1,"message":"209","line":83,"column":11,"nodeType":"205","messageId":"206","endLine":83,"endColumn":19},{"ruleId":"193","severity":1,"message":"198","line":89,"column":34,"nodeType":"195","messageId":"185","endLine":89,"endColumn":36},{"ruleId":"203","severity":1,"message":"210","line":13,"column":9,"nodeType":"205","messageId":"206","endLine":13,"endColumn":16},{"ruleId":"193","severity":1,"message":"194","line":66,"column":21,"nodeType":"195","messageId":"185","endLine":66,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":66,"column":55,"nodeType":"195","messageId":"185","endLine":66,"endColumn":57},{"ruleId":"193","severity":1,"message":"194","line":67,"column":26,"nodeType":"195","messageId":"185","endLine":67,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":68,"column":27,"nodeType":"195","messageId":"185","endLine":68,"endColumn":29},{"ruleId":"189","severity":1,"message":"211","line":91,"column":6,"nodeType":"191","endLine":91,"endColumn":21,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"194","line":109,"column":25,"nodeType":"195","messageId":"185","endLine":109,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":144,"column":25,"nodeType":"195","messageId":"185","endLine":144,"endColumn":27},{"ruleId":"193","severity":1,"message":"198","line":194,"column":30,"nodeType":"195","messageId":"185","endLine":194,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":232,"column":45,"nodeType":"195","messageId":"185","endLine":232,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":246,"column":42,"nodeType":"195","messageId":"185","endLine":246,"endColumn":44},{"ruleId":"193","severity":1,"message":"194","line":250,"column":49,"nodeType":"195","messageId":"185","endLine":250,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":259,"column":49,"nodeType":"195","messageId":"185","endLine":259,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":271,"column":49,"nodeType":"195","messageId":"185","endLine":271,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":280,"column":49,"nodeType":"195","messageId":"185","endLine":280,"endColumn":51},{"ruleId":"203","severity":1,"message":"213","line":25,"column":23,"nodeType":"205","messageId":"206","endLine":25,"endColumn":37},{"ruleId":"189","severity":1,"message":"214","line":92,"column":6,"nodeType":"191","endLine":92,"endColumn":14,"suggestions":"215"},{"ruleId":"189","severity":1,"message":"190","line":124,"column":6,"nodeType":"191","endLine":124,"endColumn":14,"suggestions":"216"},{"ruleId":"189","severity":1,"message":"214","line":161,"column":6,"nodeType":"191","endLine":161,"endColumn":14,"suggestions":"217"},{"ruleId":"189","severity":1,"message":"190","line":190,"column":6,"nodeType":"191","endLine":190,"endColumn":14,"suggestions":"218"},{"ruleId":"189","severity":1,"message":"190","line":219,"column":6,"nodeType":"191","endLine":219,"endColumn":14,"suggestions":"219"},{"ruleId":"193","severity":1,"message":"194","line":229,"column":27,"nodeType":"195","messageId":"185","endLine":229,"endColumn":29},{"ruleId":"193","severity":1,"message":"194","line":229,"column":59,"nodeType":"195","messageId":"185","endLine":229,"endColumn":61},{"ruleId":"193","severity":1,"message":"198","line":356,"column":32,"nodeType":"195","messageId":"185","endLine":356,"endColumn":34},{"ruleId":"193","severity":1,"message":"194","line":493,"column":45,"nodeType":"195","messageId":"185","endLine":493,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":500,"column":42,"nodeType":"195","messageId":"185","endLine":500,"endColumn":44},{"ruleId":"193","severity":1,"message":"194","line":504,"column":49,"nodeType":"195","messageId":"185","endLine":504,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":513,"column":49,"nodeType":"195","messageId":"185","endLine":513,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":522,"column":49,"nodeType":"195","messageId":"185","endLine":522,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":534,"column":49,"nodeType":"195","messageId":"185","endLine":534,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":543,"column":49,"nodeType":"195","messageId":"185","endLine":543,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":552,"column":49,"nodeType":"195","messageId":"185","endLine":552,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":576,"column":31,"nodeType":"195","messageId":"185","endLine":576,"endColumn":33},{"ruleId":"203","severity":1,"message":"209","line":33,"column":11,"nodeType":"205","messageId":"206","endLine":33,"endColumn":19},{"ruleId":"203","severity":1,"message":"209","line":18,"column":13,"nodeType":"205","messageId":"206","endLine":18,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":29,"column":6,"nodeType":"191","endLine":29,"endColumn":8,"suggestions":"221"},{"ruleId":"203","severity":1,"message":"209","line":45,"column":13,"nodeType":"205","messageId":"206","endLine":45,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":35,"column":6,"nodeType":"191","endLine":35,"endColumn":8,"suggestions":"222"},{"ruleId":"203","severity":1,"message":"209","line":51,"column":13,"nodeType":"205","messageId":"206","endLine":51,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":29,"column":6,"nodeType":"191","endLine":29,"endColumn":8,"suggestions":"223"},{"ruleId":"203","severity":1,"message":"209","line":45,"column":13,"nodeType":"205","messageId":"206","endLine":45,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":35,"column":6,"nodeType":"191","endLine":35,"endColumn":8,"suggestions":"224"},{"ruleId":"203","severity":1,"message":"209","line":51,"column":13,"nodeType":"205","messageId":"206","endLine":51,"endColumn":21},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'location.state'. Either include them or remove the dependency array.","ArrayExpression",["227"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'connectionEmail', 'history', 'location.state', and 'user.email'. Either include them or remove the dependency array.",["228"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.state'. Either include them or remove the dependency array.",["229"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'setGroupChats' is assigned a value but never used.","'response' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'connectionEmail' and 'user.email'. Either include them or remove the dependency array.",["230"],"'setConnections' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'location.state', and 'user.email'. Either include them or remove the dependency array.",["231"],["232"],["233"],["234"],["235"],"React Hook useEffect has a missing dependency: 'connections'. Either include it or remove the dependency array. If 'setAllMembers' needs the current value of 'connections', you can also switch to useReducer instead of useState and read 'connections' in the reducer.",["236"],["237"],["238"],["239"],"no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"248","fix":"252"},{"desc":"250","fix":"253"},{"desc":"250","fix":"254"},{"desc":"255","fix":"256"},{"desc":"255","fix":"257"},{"desc":"255","fix":"258"},{"desc":"255","fix":"259"},"Update the dependencies array to be: [connections, history, location.state]",{"range":"260","text":"261"},"Update the dependencies array to be: [connectionEmail, history, location.state, messages, user.email]",{"range":"262","text":"263"},"Update the dependencies array to be: [dispatch, history, location.state]",{"range":"264","text":"265"},"Update the dependencies array to be: [connectionEmail, emailMessages, user.email]",{"range":"266","text":"267"},"Update the dependencies array to be: [groups, history, location.state, user.email]",{"range":"268","text":"269"},"Update the dependencies array to be: [groups, history, location.state]",{"range":"270","text":"271"},{"range":"272","text":"269"},{"range":"273","text":"271"},{"range":"274","text":"271"},"Update the dependencies array to be: [connections]",{"range":"275","text":"276"},{"range":"277","text":"276"},{"range":"278","text":"276"},{"range":"279","text":"276"},[1640,1653],"[connections, history, location.state]",[2999,3009],"[connectionEmail, history, location.state, messages, user.email]",[717,719],"[dispatch, history, location.state]",[2651,2666],"[connectionEmail, emailMessages, user.email]",[2869,2877],"[groups, history, location.state, user.email]",[3791,3799],"[groups, history, location.state]",[4858,4866],[5617,5625],[6378,6386],[868,870],"[connections]",[888,890],[868,870],[887,889]]