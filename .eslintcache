[{"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js":"1","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js":"2","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js":"3","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js":"4","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js":"5","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js":"6","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js":"7","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js":"8","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js":"9","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js":"10","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js":"11","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js":"12","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js":"13","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js":"14","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js":"15"},{"size":418,"mtime":1610933324659,"results":"16","hashOfConfig":"17"},{"size":297,"mtime":1616902717354,"results":"18","hashOfConfig":"17"},{"size":1450,"mtime":1611407286432,"results":"19","hashOfConfig":"17"},{"size":2640,"mtime":1616903032311,"results":"20","hashOfConfig":"17"},{"size":9931,"mtime":1616902396700,"results":"21","hashOfConfig":"17"},{"size":693,"mtime":1610886576089,"results":"22","hashOfConfig":"17"},{"size":425,"mtime":1610930046244,"results":"23","hashOfConfig":"17"},{"size":488,"mtime":1610968041436,"results":"24","hashOfConfig":"17"},{"size":3577,"mtime":1616903054023,"results":"25","hashOfConfig":"17"},{"size":6655,"mtime":1611407603810,"results":"26","hashOfConfig":"17"},{"size":6288,"mtime":1616903359680,"results":"27","hashOfConfig":"17"},{"size":1094,"mtime":1610962016607,"results":"28","hashOfConfig":"17"},{"size":11175,"mtime":1616903365748,"results":"29","hashOfConfig":"17"},{"size":3570,"mtime":1616902199413,"results":"30","hashOfConfig":"17"},{"size":3654,"mtime":1611326250563,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5ivkir",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js",[],["67","68"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js",["69","70"],"import React from \"react\";\nimport \"./Login.css\";\nimport ProfileImage from \"../../assets/images/profile.png\";\nimport { auth, provider } from \"../../firebase\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { actionTypes } from \"../../reducer\";\nimport { useStateValue } from \"../../StateProvider\";\n\nconst Login = () => {\n  const [{}, dispatch] = useStateValue();\n  const history = useHistory();\n\n  const signInHandler = async () => {\n    try {\n      const result = await auth.signInWithPopup(provider);\n      const userData = {\n        displayname: result.user.displayName,\n        email: result.user.email,\n        avatarUrl: result.user.photoURL,\n      };\n\n      dispatch({\n        type: actionTypes.SET_USER,\n        user: userData,\n      });\n\n      await axios.post(\"/adduser\", { ...userData });\n\n      var response = await axios.post(\"/fetchconnections\", {\n        email: userData.email,\n      });\n\n      var response2 = await axios.post(\"/fetchunseendmscount\", {\n        email: userData.email,\n      });\n\n      var response3 = await axios.post(\"/fetchunseenemailscount\", {\n        email: userData.email,\n      });\n\n      var connections = response.data.connections;\n      for (let i = 0; i < connections.length; i++) {\n        if (response2.data.unseencount[connections[i].email] === undefined)\n          connections[i].unseen = 0;\n        else\n          connections[i].unseen =\n            response2.data.unseencount[connections[i].email];\n      }\n\n      for (let i = 0; i < connections.length; i++) {\n        if (response3.data.unseencount[connections[i].email] === undefined)\n          connections[i].unseenemail = 0;\n        else\n          connections[i].unseenemail =\n            response3.data.unseencount[connections[i].email];\n      }\n\n      connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\n      connections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\n\n      history.push({\n        pathname: \"/dashboard\",\n        state: {\n          user: userData,\n          connections: response.data.connections,\n        },\n      });\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <div className=\"Login\">\n      <div className=\"Login__container\">\n        <div className=\"Login__header\">\n          <img src={ProfileImage} alt=\"Image\" />\n          <br />\n          <h4>SecureEncrypt Chat</h4>\n        </div>\n        <div className=\"Login__footer\">\n          <button class=\"Login__button\" type=\"submit\" onClick={signInHandler}>\n            SIGN IN WITH GOOGLE ACCOUNT\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Pusher from \"pusher-js\";\r\nimport \"./DirectMessages.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport DateFormat from \"dateformat\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\n\r\nconst DirectMessages = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [active, setActive] = useState(-1);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState(location.state.allMessages);\r\n  const [connectionEmail, setConnectionEmail] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n    email: user.email,\r\n    connectionemail: connectionEmail,\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"11a8dd35181269e15a84\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"users\");\r\n\r\n    channel.bind(\"removeconnection\", (data) => {\r\n      const newConnections = connections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      setConnections(newConnections);\r\n    });\r\n  }, [connections]);\r\n\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"11a8dd35181269e15a84\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"directmessages\");\r\n\r\n    channel.bind(\"newmessage\", (data) => {\r\n      if (\r\n        (user.email == data.senderemail || user.email == data.receiveremail) &&\r\n        (connectionEmail == data.senderemail ||\r\n          connectionEmail == data.receiveremail)\r\n      ) {\r\n        setMessages([...messages, { ...data }]);\r\n      }\r\n    });\r\n\r\n    channel.bind(\"delayedmessages\", (data) => {\r\n      const newMessages = data.delayedMessages.filter((message) => {\r\n        return (\r\n          (user.email === message.senderemail ||\r\n            user.email === message.receiveremail) &&\r\n          (connectionEmail === message.senderemail ||\r\n            connectionEmail === message.receiveremail)\r\n        );\r\n      });\r\n      setMessages([...messages, ...newMessages]);\r\n    });\r\n\r\n    return () => {\r\n      channel.unbind_all();\r\n      channel.unsubscribe();\r\n      focusLastDiv();\r\n    };\r\n  }, [messages]);\r\n\r\n  //Handlers\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setMessages(response.data.allMessages);\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n  };\r\n\r\n  const sendMessageHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      text: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      date: date,\r\n      time: time,\r\n    };\r\n    await axios.post(\"/senddirectmessage\", data);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"DirectMessages__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DirectMessages\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".DirectMessages__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"DirectMessages__container\">\r\n        <div className=\"DirectMessages__sidebar w-100 \">\r\n          {connections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                id={\"connection\" + ind}\r\n                className={`DirectMessages__connections `}\r\n                onClick={() => {\r\n                  if (active != -1) {\r\n                    $(\"#connection\" + active).removeClass(\r\n                      \"DirectMessages__connections_active\"\r\n                    );\r\n                  }\r\n                  setActive(ind);\r\n                  $(\"#connection\" + ind).addClass(\r\n                    \"DirectMessages__connections_active\"\r\n                  );\r\n\r\n                  setConnectionEmail(connection.email);\r\n\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"DirectMessages__chat w-100 \">\r\n          <div className=\"DirectMessages__chatarea\">\r\n            {messages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`DirectMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                    >\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"DirectMessages__inputarea\">\r\n            <input\r\n              class=\"form-control customform\"\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode == 13) {\r\n                  sendMessageHandler();\r\n                }\r\n              }}\r\n            />\r\n            <i class=\"fa fa-paper-plane\" onClick={sendMessageHandler}></i>\r\n            <i\r\n              class=\"fa fa-clock-o\"\r\n              onClick={() => {\r\n                if (connectionEmail == \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Choose a Recepient...\",\r\n                    ModalBody: \"Please Choose a User to chat with...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (message === \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Type a Message...\",\r\n                    ModalBody: \"Please type something to send...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                setTimerModal({\r\n                  isShown: true,\r\n                  message: message,\r\n                  email: user.email,\r\n                  connectionemail: connectionEmail,\r\n                });\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        email={timermodal.email}\r\n        connectionemail={timermodal.connectionemail}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DirectMessages;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js",["87","88"],"import React, { useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport \"./PageTemplate.css\";\r\nimport axios from \"axios\";\r\n\r\nconst PageTemplate = (props) => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.user) {\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: location.state.user,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REMOVE_USER,\r\n      });\r\n      history.push(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const addConnectionHandler = async () => {\r\n    const response = await axios.post(\"/newconnections\", { email: user.email });\r\n    history.push({\r\n      pathname: \"/connections\",\r\n      state: {\r\n        ...location.state,\r\n        unreadconnections: response.data.unreadconnections,\r\n      },\r\n    });\r\n  };\r\n\r\n  const dashBoardLogoHandler = async () => {\r\n    var email = location.state.user.email;\r\n\r\n    var response = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var connections = response.data.connections;\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response2.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseen = 0;\r\n      else\r\n        connections[i].unseen =\r\n          response2.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response3.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseenemail = 0;\r\n      else\r\n        connections[i].unseenemail =\r\n          response3.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    connections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n    history.push({\r\n      pathname: \"/dashboard\",\r\n      state: {\r\n        user: location.state.user,\r\n        connections: connections,\r\n        allMessages: [],\r\n        emailMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const settingsHandler = () => {};\r\n\r\n  const logoutHandler = () => {\r\n    dispatch({\r\n      type: actionTypes.REMOVE_USER,\r\n    });\r\n    localStorage.removeItem(\"user\");\r\n\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"PageTemplate__container\">\r\n      <div className=\"PageTemplate__navbar\">\r\n        <nav className=\"navbar\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" onClick={dashBoardLogoHandler}>\r\n              SecureEncryptChat\r\n            </a>\r\n            <div className=\"PageTemplate__navbar_icons\">\r\n              <i onClick={addConnectionHandler} className=\"fa fa-users\"></i>\r\n              <i onClick={settingsHandler} className=\"fa fa-cog\"></i>\r\n              <i onClick={logoutHandler} className=\"fa fa-sign-out\"></i>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"PageTemplate__body\">{props.children}</div>\r\n      <div className=\"PageTemplate__footer\">\r\n        <b>\r\n          ⓒ 2020 - {new Date().getFullYear()} SECURE ENCRYPT CHAT, Inc. All\r\n          rights reserved.\r\n        </b>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js",["89","90","91","92","93"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport Pusher from \"pusher-js\";\r\n\r\nconst Dashboard = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  //States\r\n  const [DMSConnections, setDMSConnections] = useState(\r\n    location.state.connections\r\n  );\r\n  const [active, setActive] = useState(-1);\r\n  const [connectionEmail, setConnectionEmail] = useState(\"\");\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"11a8dd35181269e15a84\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"users\");\r\n\r\n    channel.bind(\"removeconnection\", (data) => {\r\n      const newConnections = DMSConnections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      setDMSConnections(newConnections);\r\n    });\r\n  }, [DMSConnections]);\r\n\r\n  //Handlers\r\n  const goToDirectMessages = async () => {\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToEmails = async () => {\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        emailMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        allMessages: response.data.allMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchEmail = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchallemails\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        emailMessages: response.data.emailMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Dashboard__container\">\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Direct Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToDirectMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  setConnectionEmail(connection.email);\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Emails </h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i onClick={goToEmails} className=\"fa fa-external-link-square\"></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  setConnectionEmail(connection.email);\r\n                  fetchEmail(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseenemail}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js",["94","95","96","97","98","99","100"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js",["101","102","103","104","105","106","107","108","109","110","111","112","113","114","115"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":11,"column":10,"nodeType":"122","messageId":"123","endLine":11,"endColumn":12},{"ruleId":"124","severity":1,"message":"125","line":78,"column":11,"nodeType":"126","endLine":78,"endColumn":49},{"ruleId":"127","severity":1,"message":"128","line":13,"column":9,"nodeType":"129","messageId":"130","endLine":13,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":60,"column":21,"nodeType":"133","messageId":"123","endLine":60,"endColumn":23},{"ruleId":"131","severity":1,"message":"132","line":60,"column":55,"nodeType":"133","messageId":"123","endLine":60,"endColumn":57},{"ruleId":"131","severity":1,"message":"132","line":61,"column":26,"nodeType":"133","messageId":"123","endLine":61,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":62,"column":27,"nodeType":"133","messageId":"123","endLine":62,"endColumn":29},{"ruleId":"134","severity":1,"message":"135","line":85,"column":6,"nodeType":"136","endLine":85,"endColumn":16,"suggestions":"137"},{"ruleId":"131","severity":1,"message":"132","line":103,"column":25,"nodeType":"133","messageId":"123","endLine":103,"endColumn":27},{"ruleId":"131","severity":1,"message":"138","line":158,"column":30,"nodeType":"133","messageId":"123","endLine":158,"endColumn":32},{"ruleId":"131","severity":1,"message":"132","line":195,"column":45,"nodeType":"133","messageId":"123","endLine":195,"endColumn":47},{"ruleId":"131","severity":1,"message":"132","line":202,"column":42,"nodeType":"133","messageId":"123","endLine":202,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":206,"column":49,"nodeType":"133","messageId":"123","endLine":206,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":215,"column":49,"nodeType":"133","messageId":"123","endLine":215,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":227,"column":49,"nodeType":"133","messageId":"123","endLine":227,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":236,"column":49,"nodeType":"133","messageId":"123","endLine":236,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":260,"column":31,"nodeType":"133","messageId":"123","endLine":260,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":269,"column":37,"nodeType":"133","messageId":"123","endLine":269,"endColumn":39},{"ruleId":"134","severity":1,"message":"139","line":25,"column":6,"nodeType":"136","endLine":25,"endColumn":8,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":100,"column":13,"nodeType":"126","endLine":100,"endColumn":72},{"ruleId":"127","severity":1,"message":"143","line":6,"column":8,"nodeType":"129","messageId":"130","endLine":6,"endColumn":9},{"ruleId":"127","severity":1,"message":"144","line":10,"column":20,"nodeType":"129","messageId":"130","endLine":10,"endColumn":28},{"ruleId":"127","severity":1,"message":"145","line":18,"column":10,"nodeType":"129","messageId":"130","endLine":18,"endColumn":16},{"ruleId":"127","severity":1,"message":"146","line":18,"column":18,"nodeType":"129","messageId":"130","endLine":18,"endColumn":27},{"ruleId":"127","severity":1,"message":"147","line":19,"column":10,"nodeType":"129","messageId":"130","endLine":19,"endColumn":25},{"ruleId":"127","severity":1,"message":"144","line":9,"column":20,"nodeType":"129","messageId":"130","endLine":9,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":25,"column":20,"nodeType":"133","messageId":"123","endLine":25,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":46,"column":20,"nodeType":"133","messageId":"123","endLine":46,"endColumn":22},{"ruleId":"127","severity":1,"message":"148","line":66,"column":11,"nodeType":"129","messageId":"130","endLine":66,"endColumn":19},{"ruleId":"131","severity":1,"message":"138","line":71,"column":34,"nodeType":"133","messageId":"123","endLine":71,"endColumn":36},{"ruleId":"127","severity":1,"message":"148","line":83,"column":11,"nodeType":"129","messageId":"130","endLine":83,"endColumn":19},{"ruleId":"131","severity":1,"message":"138","line":89,"column":34,"nodeType":"133","messageId":"123","endLine":89,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":13,"column":9,"nodeType":"129","messageId":"130","endLine":13,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":66,"column":21,"nodeType":"133","messageId":"123","endLine":66,"endColumn":23},{"ruleId":"131","severity":1,"message":"132","line":66,"column":55,"nodeType":"133","messageId":"123","endLine":66,"endColumn":57},{"ruleId":"131","severity":1,"message":"132","line":67,"column":26,"nodeType":"133","messageId":"123","endLine":67,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":68,"column":27,"nodeType":"133","messageId":"123","endLine":68,"endColumn":29},{"ruleId":"134","severity":1,"message":"135","line":91,"column":6,"nodeType":"136","endLine":91,"endColumn":21,"suggestions":"149"},{"ruleId":"131","severity":1,"message":"132","line":109,"column":25,"nodeType":"133","messageId":"123","endLine":109,"endColumn":27},{"ruleId":"131","severity":1,"message":"132","line":144,"column":25,"nodeType":"133","messageId":"123","endLine":144,"endColumn":27},{"ruleId":"131","severity":1,"message":"138","line":194,"column":30,"nodeType":"133","messageId":"123","endLine":194,"endColumn":32},{"ruleId":"131","severity":1,"message":"132","line":232,"column":45,"nodeType":"133","messageId":"123","endLine":232,"endColumn":47},{"ruleId":"131","severity":1,"message":"132","line":246,"column":42,"nodeType":"133","messageId":"123","endLine":246,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":250,"column":49,"nodeType":"133","messageId":"123","endLine":250,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":259,"column":49,"nodeType":"133","messageId":"123","endLine":259,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":271,"column":49,"nodeType":"133","messageId":"123","endLine":271,"endColumn":51},{"ruleId":"131","severity":1,"message":"132","line":280,"column":49,"nodeType":"133","messageId":"123","endLine":280,"endColumn":51},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connectionEmail' and 'user.email'. Either include them or remove the dependency array.","ArrayExpression",["152"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.state'. Either include them or remove the dependency array.",["153"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'$' is defined but never used.","'dispatch' is assigned a value but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.","'connectionEmail' is assigned a value but never used.","'response' is assigned a value but never used.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [connectionEmail, messages, user.email]",{"range":"161","text":"162"},"Update the dependencies array to be: [dispatch, history, location.state]",{"range":"163","text":"164"},"Update the dependencies array to be: [connectionEmail, emailMessages, user.email]",{"range":"165","text":"166"},[2565,2575],"[connectionEmail, messages, user.email]",[717,719],"[dispatch, history, location.state]",[2651,2666],"[connectionEmail, emailMessages, user.email]"]