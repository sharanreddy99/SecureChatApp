[{"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js":"1","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js":"2","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js":"3","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js":"4","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js":"5","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js":"6","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js":"7","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js":"8","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js":"9","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js":"10","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js":"11","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js":"12","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js":"13","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js":"14","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js":"15","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js":"16","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js":"17","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js":"18","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js":"19","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js":"20","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js":"21","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js":"22","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js":"23","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\GroupInfoModal.js":"24","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DeleteMessageModal.js":"25","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\DeleteMessageModal.js":"26","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\DeleteMessageModal.js":"27"},{"size":418,"mtime":1610933324659,"results":"28","hashOfConfig":"29"},{"size":338,"mtime":1617518971144,"results":"30","hashOfConfig":"29"},{"size":1678,"mtime":1616907755626,"results":"31","hashOfConfig":"29"},{"size":3201,"mtime":1617014009011,"results":"32","hashOfConfig":"29"},{"size":11337,"mtime":1617530542323,"results":"33","hashOfConfig":"29"},{"size":693,"mtime":1610886576089,"results":"34","hashOfConfig":"29"},{"size":425,"mtime":1610930046244,"results":"35","hashOfConfig":"29"},{"size":488,"mtime":1610968041436,"results":"36","hashOfConfig":"29"},{"size":4123,"mtime":1617013921206,"results":"37","hashOfConfig":"29"},{"size":9914,"mtime":1617518971145,"results":"38","hashOfConfig":"29"},{"size":6288,"mtime":1616903359680,"results":"39","hashOfConfig":"29"},{"size":1094,"mtime":1610962016607,"results":"40","hashOfConfig":"29"},{"size":12161,"mtime":1617533736518,"results":"41","hashOfConfig":"29"},{"size":3570,"mtime":1616902199413,"results":"42","hashOfConfig":"29"},{"size":3654,"mtime":1611326250563,"results":"43","hashOfConfig":"29"},{"size":22519,"mtime":1617532529179,"results":"44","hashOfConfig":"29"},{"size":3591,"mtime":1617023441557,"results":"45","hashOfConfig":"29"},{"size":3562,"mtime":1617518971154,"results":"46","hashOfConfig":"29"},{"size":3327,"mtime":1617518971155,"results":"47","hashOfConfig":"29"},{"size":4258,"mtime":1617518971152,"results":"48","hashOfConfig":"29"},{"size":4374,"mtime":1617518971161,"results":"49","hashOfConfig":"29"},{"size":4291,"mtime":1617518971158,"results":"50","hashOfConfig":"29"},{"size":4320,"mtime":1617518971160,"results":"51","hashOfConfig":"29"},{"size":6302,"mtime":1617518971157,"results":"52","hashOfConfig":"29"},{"size":2168,"mtime":1617529053625,"results":"53","hashOfConfig":"29"},{"size":2253,"mtime":1617531987668,"results":"54","hashOfConfig":"29"},{"size":2068,"mtime":1617533643823,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"5ivkir",{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\index.js",[],["123","124"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\App.js",["125","126"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport RouterSetup from \"./RouterSetup\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4201/api\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"App__container\">\r\n      <RouterSetup />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\RouterSetup.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Login\\Login.js",["127","128"],"import React from \"react\";\nimport \"./Login.css\";\nimport ProfileImage from \"../../assets/images/profile.png\";\nimport { auth, provider } from \"../../firebase\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { actionTypes } from \"../../reducer\";\nimport { useStateValue } from \"../../StateProvider\";\n\nconst Login = () => {\n  const [{}, dispatch] = useStateValue();\n  const history = useHistory();\n\n  const signInHandler = async () => {\n    try {\n      const result = await auth.signInWithPopup(provider);\n      const userData = {\n        displayname: result.user.displayName,\n        email: result.user.email,\n        avatarUrl: result.user.photoURL,\n      };\n\n      dispatch({\n        type: actionTypes.SET_USER,\n        user: userData,\n      });\n\n      await axios.post(\"/adduser\", { ...userData });\n\n      var response = await axios.post(\"/fetchconnections\", {\n        email: userData.email,\n      });\n\n      var response2 = await axios.post(\"/fetchunseendmscount\", {\n        email: userData.email,\n      });\n\n      var response3 = await axios.post(\"/fetchunseenemailscount\", {\n        email: userData.email,\n      });\n\n      var response4 = await axios.post(\"/fetchgroups\", {\n        email: userData.email,\n      });\n\n      var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\n        email: userData.email,\n      });\n      var connections = response.data.connections;\n      var groups = response4.data.groups;\n\n      for (let i = 0; i < connections.length; i++) {\n        if (response2.data.unseencount[connections[i].email] === undefined)\n          connections[i].unseen = 0;\n        else\n          connections[i].unseen =\n            response2.data.unseencount[connections[i].email];\n      }\n\n      for (let i = 0; i < groups.length; i++) {\n        if (response5.data.unseencount[groups[i]._id] === undefined)\n          groups[i].unseen = 0;\n        else groups[i].unseen = response5.data.unseencount[groups[i]._id];\n      }\n\n      for (let i = 0; i < connections.length; i++) {\n        if (response3.data.unseencount[connections[i].email] === undefined)\n          connections[i].unseenemail = 0;\n        else\n          connections[i].unseenemail =\n            response3.data.unseencount[connections[i].email];\n      }\n\n      connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\n      groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\n      connections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\n\n      history.push({\n        pathname: \"/dashboard\",\n        state: {\n          user: userData,\n          connections: connections,\n          groups: groups,\n        },\n      });\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <div className=\"Login\">\n      <div className=\"Login__container\">\n        <div className=\"Login__header\">\n          <img src={ProfileImage} alt=\"Image\" />\n          <br />\n          <h4>SecureEncrypt Chat</h4>\n        </div>\n        <div className=\"Login__footer\">\n          <button class=\"Login__button\" type=\"submit\" onClick={signInHandler}>\n            SIGN IN WITH GOOGLE ACCOUNT\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DirectMessages.js",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\firebase.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\StateProvider.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\reducer.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\PageTemplate\\PageTemplate.js",["145","146"],"import React, { useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport \"./PageTemplate.css\";\r\nimport axios from \"axios\";\r\n\r\nconst PageTemplate = (props) => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.user) {\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: location.state.user,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REMOVE_USER,\r\n      });\r\n      history.push(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const addConnectionHandler = async () => {\r\n    const response = await axios.post(\"/newconnections\", { email: user.email });\r\n    history.push({\r\n      pathname: \"/connections\",\r\n      state: {\r\n        ...location.state,\r\n        unreadconnections: response.data.unreadconnections,\r\n      },\r\n    });\r\n  };\r\n\r\n  const dashBoardLogoHandler = async () => {\r\n    var email = location.state.user.email;\r\n\r\n    var response = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response4 = await axios.post(\"/fetchgroups\", {\r\n      email: email,\r\n    });\r\n\r\n    var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\r\n      email: email,\r\n    });\r\n    var connections = response.data.connections;\r\n    var groups = response4.data.groups;\r\n\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response2.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseen = 0;\r\n      else\r\n        connections[i].unseen =\r\n          response2.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    for (let i = 0; i < groups.length; i++) {\r\n      if (response5.data.unseencount[groups[i]._id] === undefined)\r\n        groups[i].unseen = 0;\r\n      else groups[i].unseen = response5.data.unseencount[groups[i]._id];\r\n    }\r\n\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response3.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseenemail = 0;\r\n      else\r\n        connections[i].unseenemail =\r\n          response3.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    connections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n    history.push({\r\n      pathname: \"/dashboard\",\r\n      state: {\r\n        user: location.state.user,\r\n        connections: connections,\r\n        groups: groups,\r\n        allMessages: [],\r\n        emailMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const settingsHandler = () => {};\r\n\r\n  const logoutHandler = () => {\r\n    dispatch({\r\n      type: actionTypes.REMOVE_USER,\r\n    });\r\n    localStorage.removeItem(\"user\");\r\n\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"PageTemplate__container\">\r\n      <div className=\"PageTemplate__navbar\">\r\n        <nav className=\"navbar\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" onClick={dashBoardLogoHandler}>\r\n              SecureEncryptChat\r\n            </a>\r\n            <div className=\"PageTemplate__navbar_icons\">\r\n              <i onClick={addConnectionHandler} className=\"fa fa-users\"></i>\r\n              <i onClick={settingsHandler} className=\"fa fa-cog\"></i>\r\n              <i onClick={logoutHandler} className=\"fa fa-sign-out\"></i>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"PageTemplate__body\">{props.children}</div>\r\n      <div className=\"PageTemplate__footer\">\r\n        <b>\r\n          ⓒ 2020 - {new Date().getFullYear()} SECURE ENCRYPT CHAT, Inc. All\r\n          rights reserved.\r\n        </b>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Dashboard\\Dashboard.js",["147","148","149","150","151"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst Dashboard = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  //States\r\n  const [DMSConnections, setDMSConnections] = useState(\r\n    location.state.connections\r\n  );\r\n  const [groupChats, setGroupChats] = useState(location.state.groups);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"http://localhost:4201\");\r\n\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = DMSConnections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setDMSConnections(newConnections);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const goToDirectMessages = async () => {\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToGroupMessages = async () => {\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToEmails = async () => {\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        emailMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    var active = location.state.connections.findIndex((connection) => {\r\n      return connection.email === connectionemail;\r\n    });\r\n\r\n    var connectionemail = \"\";\r\n    if (active != -1) {\r\n      connectionemail = location.state.connections[active].email;\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        connectionemail: connectionemail,\r\n        allMessages: response.data.allMessages,\r\n        active: active,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchGroupChat = async (group) => {\r\n    const response = await axios.post(\"/fetchallgroupmessages\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    await axios.post(\"/groupmessagesseen\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    var active = location.state.groups.findIndex(\r\n      (row) => row._id === group._id && row.name === group.name\r\n    );\r\n    var activeGroup = {};\r\n    if (active != -1) {\r\n      activeGroup = location.state.groups[active];\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        active: active,\r\n        activeGroup: activeGroup,\r\n        allMessages: response.data.allMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchEmail = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchallemails\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        emailMessages: response.data.emailMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Dashboard__container\">\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Direct Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToDirectMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Group Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToGroupMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {groupChats.length > 0 ? (\r\n          groupChats.map((group, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchGroupChat(group);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img src={group.pictureUrl} alt=\".\" />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{group.name}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{group.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Groups Available...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Emails </h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i onClick={goToEmails} className=\"fa fa-external-link-square\"></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchEmail(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseenemail}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Connections\\Connections.js",["152","153","154","155","156","157","158"],"import React, { useState } from \"react\";\r\nimport \"./Connections.css\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst Connections = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [connectionemail, setConnectionEmail] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [unreadConnections, setUnreadConnections] = useState(\r\n    location.state.unreadconnections\r\n  );\r\n\r\n  const addConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't send a connection request to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post(\"/addconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const removeConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't remove a connection to yourself...\",\r\n      });\r\n      return;\r\n    }\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n  };\r\n\r\n  const acceptConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/acceptconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  const rejectConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Connections\">\r\n      <div className=\"Connections__addconnections\">\r\n        <h1>Alter Connections</h1>\r\n        <div className=\"Connections__addconnections_body\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h3>Enter Email ID</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={connectionemail}\r\n                onChange={(e) => {\r\n                  setConnectionEmail(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={addConnectionHandler}\r\n              >\r\n                Send Connection Request\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={removeConnectionHandler}\r\n              >\r\n                Remove Connection\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Connections__incomingconnections\">\r\n        <h1>Connections Requests</h1>\r\n        <div className=\"Connections__incomingconnections_body\">\r\n          {unreadConnections.map((unreadconnection, ind) => {\r\n            return (\r\n              <div className=\"Connections__unreadconnections\" key={ind}>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={unreadconnection.avatarUrl}\r\n                      alt={unreadconnection.displayname}\r\n                    />\r\n                    <h5>{unreadconnection.email}</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-success\"\r\n                      name=\"accept\"\r\n                      onClick={() => {\r\n                        acceptConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Accept\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-danger\"\r\n                      name=\"reject\"\r\n                      onClick={() => {\r\n                        rejectConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connections;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Modals\\TemplateModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\Emails.js",["159","160","161","162","163","164","165","166","167","168","169","170","171"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\GroupMessages.js",["172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\TimerModal.js",[],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\CreateGroupModal.js",["188"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst CreateGroupModal = ({ isShown, setIsShown, user }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const createGroupHandler = async () => {\r\n    if (groupName === \"\") {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Name Empty!!!\",\r\n        ModalBody: \"Please enter a valid Group Name\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          ...resultModal,\r\n          isShown: false,\r\n        });\r\n      }, 2000);\r\n    }\r\n\r\n    const response = await axios.post(\"/creategroup\", {\r\n      groupname: groupName,\r\n      imageurl: imageURL,\r\n      user: user,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: \"Success!!\",\r\n      ModalBody: \"New Group created successfully\",\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 1500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n    setImageURL(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Create Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Name</h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>Group Picture URL </h5>\r\n          <input\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control\"\r\n            type=\"url\"\r\n            name=\"imageurl\"\r\n            onChange={(e) => {\r\n              setImageURL(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={createGroupHandler}\r\n          >\r\n            Create Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CreateGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\DeleteGroupModal.js",["189"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst DeleteGroupModal = ({ isShown, setIsShown, user, group }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/deletegroup\", {\r\n        groupid: group._id,\r\n        groupname: groupName,\r\n        email: user.email,\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Deleted...\",\r\n        ModalBody: \"You have successfully deleted the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to delete the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px #5d001e\" }}>\r\n            Please type the following text <br />\r\n            <b style={{ color: \"red\" }}>{group.name}</b>\r\n            <br /> to confirm deletion...\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={group.name !== groupName}\r\n            onClick={deleteGroupHandler}\r\n          >\r\n            Delete Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default DeleteGroupModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\AddMembersModal.js",["190","191"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst AddMembersModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const addMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/addmembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Added...\",\r\n        ModalBody: \"Add the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to add members to the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Add Members to <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={addMembersHandler}\r\n          >\r\n            Add Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default AddMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveMembersModal.js",["192","193"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveMembersModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removemembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Removed...\",\r\n        ModalBody: \"Removed the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to remove members to the group...Check whether you are trying to cremove the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Remove Members from <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeMembersHandler}\r\n          >\r\n            Remove Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveMembersModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\MakeAdminsModal.js",["194","195"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst MakeAdminsModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const makeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/makeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Members to Admins in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={makeAdminsHandler}\r\n          >\r\n            Make Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default MakeAdminsModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\RemoveAdminsModal.js",["196","197"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveAdminsModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused ? \"#5d001e\" : \"white\";\r\n    var color = state.isFocused ? \"white\" : \"#5d001e\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Admins to Members in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeAdminsHandler}\r\n          >\r\n            Remove Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveAdminsModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\Modals\\GroupInfoModal.js",["198","199","200"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst GroupInfoModal = ({ isShown, setIsShown, group }) => {\r\n  //States\r\n  const [showAdmin, setShowAdmin] = useState(false);\r\n  const [showMembers, setShowMembers] = useState(false);\r\n  const [admins, setAdmins] = useState([]);\r\n\r\n  //Handlers\r\n  const chooseRoleHandler = (option) => {\r\n    if (option === \"admins\") {\r\n      if (JSON.stringify(group) !== JSON.stringify({})) {\r\n        var completeAdmins = group.members.filter((member) => {\r\n          return group.admin.some((row) => row.email === member.email);\r\n        });\r\n        setAdmins(completeAdmins);\r\n      }\r\n      setShowAdmin(true);\r\n      setShowMembers(false);\r\n    } else if (option === \"members\") {\r\n      setShowAdmin(false);\r\n      setShowMembers(true);\r\n    } else {\r\n      setShowAdmin(false);\r\n      setShowMembers(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n    setShowAdmin(false);\r\n    setShowMembers(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"#5d001e\",\r\n            color: \"white\",\r\n            textShadow: \"2px 2px black\",\r\n          }}\r\n        >\r\n          <Modal.Title>{group.name}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <img\r\n                src={group.pictureUrl}\r\n                style={{\r\n                  width: \"30vh\",\r\n                  height: \"30vh\",\r\n                  borderRadius: \"100%\",\r\n                  display: \"block\",\r\n                  marginLeft: \"auto\",\r\n                  marginRight: \"auto\",\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <div className=\"col\">\r\n              <div className=\"input-group\">\r\n                <div\r\n                  className=\"input-group-prepend\"\r\n                  style={{\r\n                    borderRight: \"1px solid white\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    className=\"input-group-text\"\r\n                    style={{\r\n                      backgroundColor: \"#5d001e\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    Owner\r\n                  </span>\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control GroupMessages__info_owner\"\r\n                  value={group.owner}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <div className=\"col\">\r\n              <select\r\n                class=\"form-control GroupMessages__info_select\"\r\n                style={{ backgroundColor: \"#5d001e\", color: \"white\" }}\r\n                onChange={(e) => {\r\n                  chooseRoleHandler(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"default\" selected>\r\n                  Choose a role to view members\r\n                </option>\r\n                <option value=\"admins\">Admins</option>\r\n                <option value=\"members\">Members</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {showAdmin ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {admins.map((admin) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={admin.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{admin.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{admin.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {showMembers ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {group.members.map((member) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={member.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{member.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{member.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#5d001e\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default GroupInfoModal;\r\n","C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\DirectMessages\\DeleteMessageModal.js",["201","202"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\GroupMessages\\DeleteMessageModal.js",["203","204"],"C:\\Users\\shara\\Desktop\\Data\\React\\practice\\src\\components\\Emails\\DeleteMessageModal.js",[],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":25},{"ruleId":"209","severity":1,"message":"213","line":1,"column":27,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"214","severity":1,"message":"215","line":11,"column":10,"nodeType":"216","messageId":"217","endLine":11,"endColumn":12},{"ruleId":"218","severity":1,"message":"219","line":95,"column":11,"nodeType":"220","endLine":95,"endColumn":49},{"ruleId":"221","severity":1,"message":"222","line":45,"column":16,"nodeType":"223","messageId":"217","endLine":45,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":48,"column":6,"nodeType":"226","endLine":48,"endColumn":8,"suggestions":"227"},{"ruleId":"221","severity":1,"message":"228","line":76,"column":21,"nodeType":"223","messageId":"217","endLine":76,"endColumn":23},{"ruleId":"221","severity":1,"message":"228","line":76,"column":55,"nodeType":"223","messageId":"217","endLine":76,"endColumn":57},{"ruleId":"221","severity":1,"message":"228","line":77,"column":26,"nodeType":"223","messageId":"217","endLine":77,"endColumn":28},{"ruleId":"221","severity":1,"message":"228","line":78,"column":27,"nodeType":"223","messageId":"217","endLine":78,"endColumn":29},{"ruleId":"221","severity":1,"message":"228","line":126,"column":25,"nodeType":"223","messageId":"217","endLine":126,"endColumn":27},{"ruleId":"221","severity":1,"message":"222","line":181,"column":30,"nodeType":"223","messageId":"217","endLine":181,"endColumn":32},{"ruleId":"221","severity":1,"message":"228","line":218,"column":45,"nodeType":"223","messageId":"217","endLine":218,"endColumn":47},{"ruleId":"221","severity":1,"message":"228","line":231,"column":42,"nodeType":"223","messageId":"217","endLine":231,"endColumn":44},{"ruleId":"221","severity":1,"message":"228","line":235,"column":49,"nodeType":"223","messageId":"217","endLine":235,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":244,"column":49,"nodeType":"223","messageId":"217","endLine":244,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":256,"column":49,"nodeType":"223","messageId":"217","endLine":256,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":265,"column":49,"nodeType":"223","messageId":"217","endLine":265,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":289,"column":31,"nodeType":"223","messageId":"217","endLine":289,"endColumn":33},{"ruleId":"221","severity":1,"message":"228","line":298,"column":37,"nodeType":"223","messageId":"217","endLine":298,"endColumn":39},{"ruleId":"224","severity":1,"message":"229","line":25,"column":6,"nodeType":"226","endLine":25,"endColumn":8,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":117,"column":13,"nodeType":"220","endLine":117,"endColumn":72},{"ruleId":"209","severity":1,"message":"233","line":9,"column":20,"nodeType":"211","messageId":"212","endLine":9,"endColumn":28},{"ruleId":"209","severity":1,"message":"234","line":17,"column":22,"nodeType":"211","messageId":"212","endLine":17,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":89,"column":9,"nodeType":"211","messageId":"237","endLine":89,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":90,"column":16,"nodeType":"223","messageId":"217","endLine":90,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":123,"column":16,"nodeType":"223","messageId":"217","endLine":123,"endColumn":18},{"ruleId":"209","severity":1,"message":"233","line":9,"column":20,"nodeType":"211","messageId":"212","endLine":9,"endColumn":28},{"ruleId":"221","severity":1,"message":"228","line":25,"column":20,"nodeType":"223","messageId":"217","endLine":25,"endColumn":22},{"ruleId":"221","severity":1,"message":"228","line":46,"column":20,"nodeType":"223","messageId":"217","endLine":46,"endColumn":22},{"ruleId":"209","severity":1,"message":"238","line":66,"column":11,"nodeType":"211","messageId":"212","endLine":66,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":71,"column":34,"nodeType":"223","messageId":"217","endLine":71,"endColumn":36},{"ruleId":"209","severity":1,"message":"238","line":83,"column":11,"nodeType":"211","messageId":"212","endLine":83,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":89,"column":34,"nodeType":"223","messageId":"217","endLine":89,"endColumn":36},{"ruleId":"221","severity":1,"message":"228","line":61,"column":21,"nodeType":"223","messageId":"217","endLine":61,"endColumn":23},{"ruleId":"221","severity":1,"message":"228","line":61,"column":55,"nodeType":"223","messageId":"217","endLine":61,"endColumn":57},{"ruleId":"221","severity":1,"message":"228","line":62,"column":26,"nodeType":"223","messageId":"217","endLine":62,"endColumn":28},{"ruleId":"221","severity":1,"message":"228","line":63,"column":27,"nodeType":"223","messageId":"217","endLine":63,"endColumn":29},{"ruleId":"221","severity":1,"message":"228","line":119,"column":25,"nodeType":"223","messageId":"217","endLine":119,"endColumn":27},{"ruleId":"221","severity":1,"message":"228","line":154,"column":25,"nodeType":"223","messageId":"217","endLine":154,"endColumn":27},{"ruleId":"221","severity":1,"message":"222","line":204,"column":30,"nodeType":"223","messageId":"217","endLine":204,"endColumn":32},{"ruleId":"221","severity":1,"message":"228","line":249,"column":45,"nodeType":"223","messageId":"217","endLine":249,"endColumn":47},{"ruleId":"221","severity":1,"message":"228","line":263,"column":42,"nodeType":"223","messageId":"217","endLine":263,"endColumn":44},{"ruleId":"221","severity":1,"message":"228","line":267,"column":49,"nodeType":"223","messageId":"217","endLine":267,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":276,"column":49,"nodeType":"223","messageId":"217","endLine":276,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":288,"column":49,"nodeType":"223","messageId":"217","endLine":288,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":297,"column":49,"nodeType":"223","messageId":"217","endLine":297,"endColumn":51},{"ruleId":"209","severity":1,"message":"239","line":27,"column":23,"nodeType":"211","messageId":"212","endLine":27,"endColumn":37},{"ruleId":"221","severity":1,"message":"222","line":73,"column":16,"nodeType":"223","messageId":"217","endLine":73,"endColumn":18},{"ruleId":"224","severity":1,"message":"240","line":77,"column":6,"nodeType":"226","endLine":77,"endColumn":8,"suggestions":"241"},{"ruleId":"235","severity":1,"message":"242","line":170,"column":15,"nodeType":"211","messageId":"237","endLine":170,"endColumn":24},{"ruleId":"221","severity":1,"message":"228","line":230,"column":27,"nodeType":"223","messageId":"217","endLine":230,"endColumn":29},{"ruleId":"221","severity":1,"message":"228","line":230,"column":59,"nodeType":"223","messageId":"217","endLine":230,"endColumn":61},{"ruleId":"221","severity":1,"message":"222","line":357,"column":32,"nodeType":"223","messageId":"217","endLine":357,"endColumn":34},{"ruleId":"221","severity":1,"message":"228","line":506,"column":45,"nodeType":"223","messageId":"217","endLine":506,"endColumn":47},{"ruleId":"221","severity":1,"message":"228","line":519,"column":42,"nodeType":"223","messageId":"217","endLine":519,"endColumn":44},{"ruleId":"221","severity":1,"message":"228","line":523,"column":49,"nodeType":"223","messageId":"217","endLine":523,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":532,"column":49,"nodeType":"223","messageId":"217","endLine":532,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":541,"column":49,"nodeType":"223","messageId":"217","endLine":541,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":553,"column":49,"nodeType":"223","messageId":"217","endLine":553,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":562,"column":49,"nodeType":"223","messageId":"217","endLine":562,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":571,"column":49,"nodeType":"223","messageId":"217","endLine":571,"endColumn":51},{"ruleId":"221","severity":1,"message":"228","line":595,"column":31,"nodeType":"223","messageId":"217","endLine":595,"endColumn":33},{"ruleId":"209","severity":1,"message":"238","line":33,"column":11,"nodeType":"211","messageId":"212","endLine":33,"endColumn":19},{"ruleId":"209","severity":1,"message":"238","line":18,"column":13,"nodeType":"211","messageId":"212","endLine":18,"endColumn":21},{"ruleId":"224","severity":1,"message":"243","line":29,"column":6,"nodeType":"226","endLine":29,"endColumn":8,"suggestions":"244"},{"ruleId":"209","severity":1,"message":"238","line":45,"column":13,"nodeType":"211","messageId":"212","endLine":45,"endColumn":21},{"ruleId":"224","severity":1,"message":"243","line":35,"column":6,"nodeType":"226","endLine":35,"endColumn":8,"suggestions":"245"},{"ruleId":"209","severity":1,"message":"238","line":51,"column":13,"nodeType":"211","messageId":"212","endLine":51,"endColumn":21},{"ruleId":"224","severity":1,"message":"243","line":29,"column":6,"nodeType":"226","endLine":29,"endColumn":8,"suggestions":"246"},{"ruleId":"209","severity":1,"message":"238","line":45,"column":13,"nodeType":"211","messageId":"212","endLine":45,"endColumn":21},{"ruleId":"224","severity":1,"message":"243","line":35,"column":6,"nodeType":"226","endLine":35,"endColumn":8,"suggestions":"247"},{"ruleId":"209","severity":1,"message":"238","line":51,"column":13,"nodeType":"211","messageId":"212","endLine":51,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":61,"column":15,"nodeType":"220","endLine":71,"endColumn":17},{"ruleId":"248","severity":1,"message":"249","line":128,"column":27,"nodeType":"220","endLine":128,"endColumn":56},{"ruleId":"248","severity":1,"message":"249","line":157,"column":27,"nodeType":"220","endLine":157,"endColumn":57},{"ruleId":"209","severity":1,"message":"250","line":5,"column":8,"nodeType":"211","messageId":"212","endLine":5,"endColumn":18},{"ruleId":"209","severity":1,"message":"251","line":7,"column":8,"nodeType":"211","messageId":"212","endLine":7,"endColumn":21},{"ruleId":"209","severity":1,"message":"250","line":5,"column":8,"nodeType":"211","messageId":"212","endLine":5,"endColumn":18},{"ruleId":"209","severity":1,"message":"251","line":7,"column":8,"nodeType":"211","messageId":"212","endLine":7,"endColumn":21},"no-native-reassign",["252"],"no-negated-in-lhs",["253"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.","ArrayExpression",["254"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.state'. Either include them or remove the dependency array.",["255"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'dispatch' is assigned a value but never used.","'setGroupChats' is assigned a value but never used.","no-redeclare","'connectionemail' is already defined.","redeclared","'response' is assigned a value but never used.","'setConnections' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'active' and 'location.state.activeGroup'. Either include them or remove the dependency array.",["256"],"'newGroups' is already defined.","React Hook useEffect has a missing dependency: 'connections'. Either include it or remove the dependency array. If 'setAllMembers' needs the current value of 'connections', you can also switch to useReducer instead of useState and read 'connections' in the reducer.",["257"],["258"],["259"],["260"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'DateFormat' is defined but never used.","'TemplateModal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"267","fix":"269"},{"desc":"267","fix":"270"},{"desc":"267","fix":"271"},"Update the dependencies array to be: [active]",{"range":"272","text":"273"},"Update the dependencies array to be: [dispatch, history, location.state]",{"range":"274","text":"275"},"Update the dependencies array to be: [active, location.state.activeGroup]",{"range":"276","text":"277"},"Update the dependencies array to be: [connections]",{"range":"278","text":"279"},{"range":"280","text":"279"},{"range":"281","text":"279"},{"range":"282","text":"279"},[1582,1584],"[active]",[717,719],"[dispatch, history, location.state]",[2600,2602],"[active, location.state.activeGroup]",[868,870],"[connections]",[888,890],[868,870],[887,889]]