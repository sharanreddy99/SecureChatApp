{"version":3,"sources":["assets/images/profile.png","firebase.js","reducer.js","StateProvider.js","components/Login/Login.js","assets/images/Logo.png","components/PageTemplate/PageTemplate.js","components/Dashboard/Dashboard.js","components/Modals/TemplateModal.js","components/Connections/Connections.js","components/DirectMessages/TimerModal.js","components/DirectMessages/DeleteMessageModal.js","components/DirectMessages/UpdateMessageModal.js","components/Modals/EmojiPickerModal.js","components/DirectMessages/DirectMessages.js","components/GroupMessages/TimerModal.js","components/GroupMessages/Modals/CreateGroupModal.js","components/GroupMessages/Modals/DeleteGroupModal.js","components/GroupMessages/Modals/AddMembersModal.js","components/GroupMessages/Modals/RemoveMembersModal.js","components/GroupMessages/Modals/MakeAdminsModal.js","components/GroupMessages/Modals/RemoveAdminsModal.js","components/GroupMessages/Modals/GroupInfoModal.js","components/GroupMessages/DeleteMessageModal.js","components/GroupMessages/UpdateMessageModal.js","components/GroupMessages/GroupMessages.js","components/Emails/Modals/CreateGroupModal.js","components/Emails/Modals/DeleteGroupModal.js","components/Emails/TimerModal.js","components/Emails/Emails.js","assets/images/Sharan.JPG","assets/images/Roshan.jpg","assets/images/Sunil.jpg","components/AboutUs/AboutUs.js","RouterSetup.js","App.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","actionTypes","reducer","state","action","type","user","StateContext","createContext","useStateValue","useContext","StateProvider","initialState","children","Provider","value","useReducer","Login","dispatch","history","useHistory","signInHandler","a","signInWithPopup","result","userData","displayname","displayName","email","avatarUrl","photoURL","axios","post","response","emailresponse","response2","response3","response4","response5","connections","data","emailconnections","groups","i","length","undefined","unseencount","unseen","_id","unseenemail","sort","b","push","pathname","allMessages","emailMessages","console","log","message","className","src","ProfileImage","alt","class","onClick","PageTemplate","props","location","useLocation","useEffect","addConnectionHandler","unreadconnections","dashBoardLogoHandler","window","reload","Logo","localStorage","removeItem","Date","getFullYear","Dashboard","useState","DMSConnections","setDMSConnections","EmailConnections","groupChats","socket","socketIOClient","on","newConnections","filter","connection","replace","disconnect","goToDirectMessages","goToGroupMessages","goToEmails","owner","allgroups","map","group","name","isGroup","inboxMails","emails","fetchChat","connectionemail","active","findIndex","fetchGroupChat","groupid","groupname","row","activeGroup","fetchEmail","ind","style","float","display","justifyContent","alignItems","width","height","textShadow","fontWeight","pictureUrl","TemplateModal","isShown","setIsShown","ModalTitle","ModalBody","handleClose","Modal","show","onHide","backdrop","keyboard","Header","closeButton","backgroundColor","color","Title","Body","Footer","Button","Connections","setConnectionEmail","modal","setModal","unreadConnections","setUnreadConnections","setModalTimeoutHandler","setTimeout","removeConnectionHandler","acceptConnectionHandler","newUnreadConnections","oldconnection","rejectConnectionHandler","onChange","e","target","unreadconnection","TimerModal","setMessage","todaydate","DateFormat","date","setDate","time","setTime","resultModal","setResultModal","sendDelayedMessageHandler","text","senderemail","receiveremail","status","min","DeleteMessageModal","messages","setMessages","editbutton","deletebutton","deleteMessageHandler","updatedMessages","classList","remove","add","UpdateMessageModal","newMessage","setNewMessage","updateMessageHandler","newmessage","padding","placeholder","onKeyDown","key","EmojiPickerModal","emojiText","setEmojiText","isEmojiPicked","setIsEmojiPicked","emojiPicker","document","querySelector","addEventListener","event","ele","getElementById","detail","emoji","removeEventListener","id","default-group","DirectMessages","setConnections","setActive","connectionEmail","timermodal","setTimerModal","deleteMessageModal","setDeleteMessageModal","updateMessageModal","setUpdateMessageModal","emojiPickerModal","setEmojiPickerModal","$","addClass","focusLastDiv","newMessages","delayedMessages","sendMessageHandler","objDiv","getElementsByClassName","scrollTop","scrollHeight","toggle","removeClass","onMouseEnter","onMouseLeave","CreateGroupModal","groupName","setGroupName","imageURL","setImageURL","createGroupHandler","imageurl","DeleteGroupModal","deleteGroupHandler","disabled","AddMembersModal","allMembers","setAllMembers","selectedMembers","setSelectedMembers","label","addMembersHandler","members","member","styles","option","provided","isFocused","isMulti","isSearchable","options","RemoveMembersModal","removeMembersHandler","MakeAdminsModal","makeAdminsHandler","admins","RemoveAdminsModal","removeAdminsHandler","GroupInfoModal","setGroups","setActiveGroup","showAdmin","setShowAdmin","showMembers","setShowMembers","setAdmins","exitGroupHandler","confirm","newGroups","borderRight","JSON","stringify","completeAdmins","admin","some","chooseRoleHandler","selected","messageid","GroupMessages","createGroupModal","setCreateGroupModal","deleteGroupModal","setDeleteGroupModal","addMembersModal","setAddMembersModal","removeMembersModal","setRemoveMembersModal","makeAdminsModal","setMakeAdminsModal","removeAdminsModal","setRemoveAdminsModal","groupInfoModal","setGroupInfoModal","Object","keys","isGroupClicked","valueOf","allEmails","groupEmails","setGroupEmails","customStyles","control","base","background","borderRadius","borderColor","boxShadow","noOptionsMessage","menu","marginTop","menuList","multiValue","multiValueLabel","input","receiveremails","response1","maxMenuHeight","groupNames","setGroupNames","emailgroups","temp","recipients","toEmails","setToEmails","subject","setSubject","newMailBody","setNewMailBody","newMailAttachments","setNewMailAttachments","sendDelayedEmailHandler","formData","FormData","append","Emails","setAllEmails","showMenu","setShowMenu","showNewMail","setShowNewMail","showInbox","setShowInbox","showSent","setShowSent","timerModal","sentMails","setSentMails","setInboxMails","sendMailHandler","deleteSentMailHandler","mailid","mail","deleteAllSentMailsHandler","deleteInboxMailHandler","deleteAllInboxMailsHandler","hidden","title","files","trigger","val","split","line","indexOf","join","receivermail","AboutUs","RoshanImg","href","SharanImg","SunilImg","RouterSetup","exact","path","to","defaults","baseURL","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.3f11f7d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile.d39ee9e2.png\";","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n  REMOVE_USER: \"REOMOVE_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case actionTypes.REMOVE_USER:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n\r\nconst StateProvider = ({ reducer, initialState, children }) => {\r\n  return (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default StateProvider;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport ProfileImage from \"../../assets/images/profile.png\";\r\nimport { auth, provider } from \"../../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\n\r\nconst Login = () => {\r\n  const [{}, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  const signInHandler = async () => {\r\n    try {\r\n      const result = await auth.signInWithPopup(provider);\r\n      const userData = {\r\n        displayname: result.user.displayName,\r\n        email: result.user.email,\r\n        avatarUrl: result.user.photoURL,\r\n      };\r\n\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: userData,\r\n      });\r\n\r\n      await axios.post(\"/adduser\", { ...userData });\r\n\r\n      var email = userData.email;\r\n\r\n      var response = await axios.post(\"/fetchconnections\", {\r\n        email: email,\r\n      });\r\n\r\n      var emailresponse = await axios.post(\"/fetchconnections\", {\r\n        email: email,\r\n      });\r\n\r\n      var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var response4 = await axios.post(\"/fetchgroups\", {\r\n        email: email,\r\n      });\r\n\r\n      var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\r\n        email: email,\r\n      });\r\n\r\n      var connections = response.data.connections;\r\n      var emailconnections = emailresponse.data.connections;\r\n      var groups = response4.data.groups;\r\n\r\n      for (let i = 0; i < connections.length; i++) {\r\n        if (response2.data.unseencount[connections[i].email] === undefined)\r\n          connections[i].unseen = 0;\r\n        else\r\n          connections[i].unseen =\r\n            response2.data.unseencount[connections[i].email];\r\n      }\r\n\r\n      for (let i = 0; i < groups.length; i++) {\r\n        if (response5.data.unseencount[groups[i]._id] === undefined)\r\n          groups[i].unseen = 0;\r\n        else groups[i].unseen = response5.data.unseencount[groups[i]._id];\r\n      }\r\n\r\n      for (let i = 0; i < emailconnections.length; i++) {\r\n        if (response3.data.unseencount[emailconnections[i].email] === undefined)\r\n          emailconnections[i].unseenemail = 0;\r\n        else\r\n          emailconnections[i].unseenemail =\r\n            response3.data.unseencount[emailconnections[i].email];\r\n      }\r\n\r\n      connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n      groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n      emailconnections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n      history.push({\r\n        pathname: \"/dashboard\",\r\n        state: {\r\n          user: userData,\r\n          connections: connections,\r\n          emailconnections: emailconnections,\r\n          groups: groups,\r\n          allMessages: [],\r\n          emailMessages: [],\r\n        },\r\n      });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div className=\"Login__container\">\r\n        <div className=\"Login__header\">\r\n          <img src={ProfileImage} alt=\"Image\" />\r\n          <br />\r\n          <h4>SecureChat</h4>\r\n        </div>\r\n        <div className=\"Login__footer\">\r\n          <button class=\"Login__button\" type=\"submit\" onClick={signInHandler}>\r\n            SIGN IN WITH GOOGLE ACCOUNT\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/Logo.54e9af26.png\";","import React, { useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { actionTypes } from \"../../reducer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport Logo from \"../../assets/images/Logo.png\";\r\nimport \"./PageTemplate.css\";\r\nimport axios from \"axios\";\r\n\r\nconst PageTemplate = (props) => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.user) {\r\n      dispatch({\r\n        type: actionTypes.SET_USER,\r\n        user: location.state.user,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REMOVE_USER,\r\n      });\r\n      history.push(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const addConnectionHandler = async () => {\r\n    const response = await axios.post(\"/newconnections\", { email: user.email });\r\n    history.push({\r\n      pathname: \"/connections\",\r\n      state: {\r\n        ...location.state,\r\n        unreadconnections: response.data.unreadconnections,\r\n      },\r\n    });\r\n  };\r\n\r\n  const dashBoardLogoHandler = async () => {\r\n    var email = location.state.user.email;\r\n\r\n    var response = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var emailresponse = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    var response2 = await axios.post(\"/fetchunseendmscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response3 = await axios.post(\"/fetchunseenemailscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var response4 = await axios.post(\"/fetchgroups\", {\r\n      email: email,\r\n    });\r\n\r\n    var response5 = await axios.post(\"/fetchunseengroupchatscount\", {\r\n      email: email,\r\n    });\r\n\r\n    var connections = response.data.connections;\r\n    var emailconnections = emailresponse.data.connections;\r\n    var groups = response4.data.groups;\r\n\r\n    for (let i = 0; i < connections.length; i++) {\r\n      if (response2.data.unseencount[connections[i].email] === undefined)\r\n        connections[i].unseen = 0;\r\n      else\r\n        connections[i].unseen =\r\n          response2.data.unseencount[connections[i].email];\r\n    }\r\n\r\n    for (let i = 0; i < groups.length; i++) {\r\n      if (response5.data.unseencount[groups[i]._id] === undefined)\r\n        groups[i].unseen = 0;\r\n      else groups[i].unseen = response5.data.unseencount[groups[i]._id];\r\n    }\r\n\r\n    for (let i = 0; i < emailconnections.length; i++) {\r\n      if (response3.data.unseencount[emailconnections[i].email] === undefined)\r\n        emailconnections[i].unseenemail = 0;\r\n      else\r\n        emailconnections[i].unseenemail =\r\n          response3.data.unseencount[emailconnections[i].email];\r\n    }\r\n\r\n    connections.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    groups.sort((a, b) => (a.unseen < b.unseen ? 1 : -1));\r\n    emailconnections.sort((a, b) => (a.unseenemail < b.unseenemail ? 1 : -1));\r\n\r\n    history.push({\r\n      pathname: \"/dashboard\",\r\n      state: {\r\n        user: location.state.user,\r\n        connections: connections,\r\n        emailconnections: emailconnections,\r\n        groups: groups,\r\n        allMessages: [],\r\n        emailMessages: [],\r\n      },\r\n    });\r\n\r\n    if (location.pathname === \"/dashboard\") {\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const aboutUsHandler = () => {\r\n    history.push({\r\n      pathname: \"/aboutus\",\r\n      state: {\r\n        user: location.state.user,\r\n      },\r\n    });\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    dispatch({\r\n      type: actionTypes.REMOVE_USER,\r\n    });\r\n    localStorage.removeItem(\"user\");\r\n\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"PageTemplate__container\">\r\n      <div className=\"PageTemplate__navbar\">\r\n        <nav className=\"navbar\">\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" onClick={dashBoardLogoHandler}>\r\n              <img src={Logo} className=\"PageTemplate__logo\" />\r\n              SecureChat\r\n            </a>\r\n            <div className=\"PageTemplate__navbar_icons\">\r\n              <i onClick={addConnectionHandler} className=\"fa fa-users\"></i>\r\n              <i onClick={aboutUsHandler} className=\"fa fa-cog\"></i>\r\n              <i onClick={logoutHandler} className=\"fa fa-sign-out\"></i>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"PageTemplate__body\">{props.children}</div>\r\n      <div className=\"PageTemplate__footer\">\r\n        <b>ⓒ 2020 - {new Date().getFullYear()} Secure Chat </b>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst Dashboard = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  //States\r\n  const [DMSConnections, setDMSConnections] = useState(\r\n    location.state.connections\r\n  );\r\n  const [EmailConnections, setEmailConnections] = useState(\r\n    location.state.emailconnections\r\n  );\r\n  const [groupChats, setGroupChats] = useState(location.state.groups);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"\");\r\n\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = DMSConnections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setDMSConnections(newConnections);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const goToDirectMessages = async () => {\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToGroupMessages = async () => {\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        allMessages: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  const goToEmails = async () => {\r\n    const response = await axios.post(\"/getemailgroups\", { owner: user.email });\r\n    const allgroups = response.data.allgroups.map((group) => ({\r\n      email: group.name,\r\n      isGroup: true,\r\n    }));\r\n\r\n    const response2 = await axios.post(\"/fetchinboxmail\", {\r\n      email: user.email,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: [...location.state.emailconnections, ...allgroups],\r\n        inboxMails: response2.data.emails,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    var active = location.state.connections.findIndex((connection) => {\r\n      return connection.email === connectionemail;\r\n    });\r\n\r\n    var connectionemail = \"\";\r\n    if (active != -1) {\r\n      connectionemail = location.state.connections[active].email;\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/directmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        connectionemail: connectionemail,\r\n        allMessages: response.data.allMessages,\r\n        active: active,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchGroupChat = async (group) => {\r\n    const response = await axios.post(\"/fetchallgroupmessages\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    await axios.post(\"/groupmessagesseen\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    var active = location.state.groups.findIndex(\r\n      (row) => row._id === group._id && row.name === group.name\r\n    );\r\n    var activeGroup = {};\r\n    if (active != -1) {\r\n      activeGroup = location.state.groups[active];\r\n    }\r\n\r\n    history.push({\r\n      pathname: \"/groupmessages\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.connections,\r\n        groups: location.state.groups,\r\n        active: active,\r\n        activeGroup: activeGroup,\r\n        allMessages: response.data.allMessages,\r\n      },\r\n    });\r\n  };\r\n\r\n  const fetchEmail = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchspecificinboxmail\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    await axios.post(\"/emailsseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    history.push({\r\n      pathname: \"/emails\",\r\n      state: {\r\n        user: user,\r\n        connections: location.state.emailconnections,\r\n        inboxMails: response.data.emails,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Dashboard__container\">\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Direct Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToDirectMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {DMSConnections.length > 0 ? (\r\n          DMSConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Group Messages</h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i\r\n              onClick={goToGroupMessages}\r\n              className=\"fa fa-external-link-square\"\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        {groupChats.length > 0 ? (\r\n          groupChats.map((group, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchGroupChat(group);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img src={group.pictureUrl} alt=\".\" />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{group.name}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{group.unseen}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Groups Available...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Dashboard__directmessages Dashboard__row\">\r\n        <div className=\"row Dashboard__row_header\">\r\n          <div className=\"col-10 text-center\">\r\n            <h3>Emails </h3>\r\n          </div>\r\n          <div className=\"col Dashboard__row_icon\">\r\n            <i onClick={goToEmails} className=\"fa fa-external-link-square\"></i>\r\n          </div>\r\n        </div>\r\n        {EmailConnections.length > 0 ? (\r\n          EmailConnections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                className=\"Dashboard__DM_container\"\r\n                onClick={() => {\r\n                  fetchEmail(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row p-0 mt-2 m-0\">\r\n                  <div className=\"col-2\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-8\">\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                  <div className=\"col-2\">\r\n                    <p style={{ float: \"right\" }}>{connection.unseenemail}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div\r\n            className=\"div\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <h4\r\n              style={{\r\n                textShadow: \"1px 1px var(--logoTextColor)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              No Connections...\r\n            </h4>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst TemplateModal = ({ isShown, setIsShown, ModalTitle, ModalBody }) => {\r\n  const handleClose = () => {\r\n    setIsShown({ isShown: false, ModalTitle, ModalBody });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={isShown}\r\n      onHide={handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      <Modal.Header\r\n        closeButton\r\n        style={{\r\n          backgroundColor: \"var(--modalHeaderBackground)\",\r\n          color: \"var(--modalHeaderText)\",\r\n          textShadow: \"2px 2px var(--modalTextShadow)\",\r\n        }}\r\n      >\r\n        <Modal.Title>{ModalTitle}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body style={{ fontWeight: \"bold\" }}>{ModalBody}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"var(--modalButtonBackground)\",\r\n            color: \"var(--modalButtonText)\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n          onClick={handleClose}\r\n        >\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\nexport default TemplateModal;\r\n","import React, { useState } from \"react\";\r\nimport \"./Connections.css\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst Connections = () => {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [connectionemail, setConnectionEmail] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [unreadConnections, setUnreadConnections] = useState(\r\n    location.state.unreadconnections\r\n  );\r\n\r\n  const addConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't send a connection request to yourself...\",\r\n      });\r\n      setModalTimeoutHandler();\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post(\"/addconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n    setModalTimeoutHandler();\r\n  };\r\n\r\n  const setModalTimeoutHandler = async () => {\r\n    setTimeout(() => {\r\n      setModal({ ...modal, isShown: false });\r\n    }, 2000);\r\n  };\r\n\r\n  const removeConnectionHandler = async () => {\r\n    if (user.email == connectionemail) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"LOL😂\",\r\n        ModalBody: \"You can't remove a connection to yourself...\",\r\n      });\r\n      setModalTimeoutHandler();\r\n      return;\r\n    }\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n    setModalTimeoutHandler();\r\n  };\r\n\r\n  const acceptConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/acceptconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  const rejectConnectionHandler = async (connection) => {\r\n    const response = await axios.post(\"/removeconnection\", {\r\n      email: user.email,\r\n      connectionemail: connection.email,\r\n    });\r\n\r\n    const newUnreadConnections = unreadConnections.filter((oldconnection) => {\r\n      return oldconnection.email != connection.email;\r\n    });\r\n\r\n    history.replace({\r\n      pathname: \"/connections\",\r\n      state: { user, unreadconnections: newUnreadConnections },\r\n    });\r\n\r\n    setUnreadConnections(newUnreadConnections);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Connections\">\r\n      <div className=\"Connections__addconnections\">\r\n        <h1>Alter Connections</h1>\r\n        <div className=\"Connections__addconnections_body\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h3>Enter Email ID</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={connectionemail}\r\n                onChange={(e) => {\r\n                  setConnectionEmail(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={addConnectionHandler}\r\n              >\r\n                Send Connection Request\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                name=\"addconnection\"\r\n                onClick={removeConnectionHandler}\r\n              >\r\n                Remove Connection\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Connections__incomingconnections\">\r\n        <h1>Connections Requests</h1>\r\n        <div className=\"Connections__incomingconnections_body\">\r\n          {unreadConnections.map((unreadconnection, ind) => {\r\n            return (\r\n              <div className=\"Connections__unreadconnections\" key={ind}>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={unreadconnection.avatarUrl}\r\n                      alt={unreadconnection.displayname}\r\n                    />\r\n                    <h5>{unreadconnection.email}</h5>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-success\"\r\n                      name=\"accept\"\r\n                      onClick={() => {\r\n                        acceptConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Accept\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn w-100 btn-danger\"\r\n                      name=\"reject\"\r\n                      onClick={() => {\r\n                        rejectConnectionHandler(unreadconnection);\r\n                      }}\r\n                    >\r\n                      Reject\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Connections;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst TimerModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  setMessage,\r\n  email,\r\n  connectionemail,\r\n}) => {\r\n  const todaydate = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const sendDelayedMessageHandler = async () => {\r\n    const response = await axios.post(\"/delaydirectmessage\", {\r\n      text: message,\r\n      senderemail: email,\r\n      receiveremail: connectionemail,\r\n      date: date,\r\n      time: time,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n\r\n    if (response.data.status === \"success\") {\r\n      setMessage(\"\");\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      isShown: false,\r\n      message: \"\",\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delayed Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Choose Date\r\n          </h5>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            value={date}\r\n            min={todaydate}\r\n            onChange={(e) => {\r\n              setDate(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Choose Time\r\n          </h5>\r\n          <input\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control\"\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={time}\r\n            onChange={(e) => {\r\n              setTime(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={sendDelayedMessageHandler}\r\n          >\r\n            Send Delayed Message\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default TimerModal;\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst DeleteMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  messages,\r\n  setMessages,\r\n  editbutton,\r\n  deletebutton,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const deleteMessageHandler = async () => {\r\n    await axios.post(\"/deletedirectmessage\", { message: message });\r\n    const updatedMessages = messages.filter((row) => row._id !== message._id);\r\n    history.replace({\r\n      ...history.location,\r\n      state: { ...location.state, allMessages: updatedMessages },\r\n    });\r\n    setMessages(updatedMessages);\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Are you sure you want to delete the message?\r\n          </h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={deleteMessageHandler}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default DeleteMessageModal;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst UpdateMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  editbutton,\r\n  deletebutton,\r\n  connectionemail,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const updateMessageHandler = async () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n\r\n    await axios.post(\"/updatedirectmessage\", {\r\n      message: message,\r\n      newmessage: newMessage,\r\n      connectionemail: connectionemail,\r\n    });\r\n    setNewMessage(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Update the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h4>Old Message: </h4>\r\n          <b className=\"DirectMessages__oldmessage\" style={{ padding: \"2%\" }}>\r\n            {typeof message === \"object\" ? message.text : \"\"}\r\n          </b>\r\n          <hr />\r\n          <input\r\n            type=\"text\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control\"\r\n            placeholder=\"Enter New Message.\"\r\n            value={newMessage}\r\n            onChange={(e) => {\r\n              setNewMessage(e.target.value);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                updateMessageHandler();\r\n              }\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={updateMessageHandler}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default UpdateMessageModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"unicode-emoji-picker\";\r\nimport \"./EmojiPickerModal.css\";\r\n\r\nconst EmojiPickerModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  emojiText,\r\n  setEmojiText,\r\n  message,\r\n  setMessage,\r\n}) => {\r\n  //States\r\n  const [isEmojiPicked, setIsEmojiPicked] = useState(false);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    const emojiPicker = document.querySelector(\"unicode-emoji-picker\");\r\n    if (isEmojiPicked) {\r\n      emojiPicker.addEventListener(\"emoji-pick\", (event) => {\r\n        var ele = document.getElementById(\"emojiTextInput\");\r\n        setEmojiText(ele.value + event.detail.emoji);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (isEmojiPicked) {\r\n        emojiPicker.removeEventListener(\"emoji-pick\", (event) => {});\r\n      }\r\n    };\r\n  }, [isEmojiPicked]);\r\n\r\n  const handleClose = () => {\r\n    setIsEmojiPicked(false);\r\n    setIsShown({ isShown: false });\r\n  };\r\n\r\n  const addEmojiHandler = () => {\r\n    setMessage(message + emojiText);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={isShown}\r\n      onHide={handleClose}\r\n      backdrop=\"static\"\r\n      keyboard={true}\r\n    >\r\n      <Modal.Header\r\n        closeButton\r\n        style={{\r\n          backgroundColor: \"var(--modalHeaderBackground)\",\r\n          color: \"var(--modalHeaderText)\",\r\n          textShadow: \"2px 2px var(--modalTextShadow)\",\r\n        }}\r\n      >\r\n        <Modal.Title>Emoji Picker</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n        <input\r\n          type=\"textarea\"\r\n          style={{\r\n            backgroundColor: \"var(--emojiBoxColor)\",\r\n            color: \"var(--emojiTextColor)\",\r\n          }}\r\n          id=\"emojiTextInput\"\r\n          class=\"form-control\"\r\n          placeholder=\"No Emoji Chosen\"\r\n          value={emojiText}\r\n          onChange={(e) => {\r\n            setEmojiText(e.target.value);\r\n          }}\r\n        />\r\n        <unicode-emoji-picker\r\n          onClick={() => {\r\n            setIsEmojiPicked(true);\r\n          }}\r\n          default-group=\"search\"\r\n        ></unicode-emoji-picker>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"var(--modalButtonBackground)\",\r\n            color: \"var(--modalButtonText)\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n          onClick={addEmojiHandler}\r\n        >\r\n          Add Emojis\r\n        </Button>\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"var(--modalButtonBackground)\",\r\n            color: \"var(--modalButtonText)\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n          onClick={handleClose}\r\n        >\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\nexport default EmojiPickerModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./DirectMessages.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport DateFormat from \"dateformat\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport DeleteMessageModal from \"./DeleteMessageModal\";\r\nimport UpdateMessageModal from \"./UpdateMessageModal\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport EmojiPickerModal from \"../Modals/EmojiPickerModal\";\r\n\r\nconst DirectMessages = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n  var editbutton = undefined;\r\n  var deletebutton = undefined;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [active, setActive] = useState(\r\n    location.state.active !== undefined ? location.state.active : -1\r\n  );\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState(location.state.allMessages);\r\n  const [connectionEmail, setConnectionEmail] = useState(\r\n    location.state.connectionemail ? location.state.connectionemail : \"\"\r\n  );\r\n  const [emojiText, setEmojiText] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n    email: user.email,\r\n    connectionemail: connectionEmail,\r\n  });\r\n  const [deleteMessageModal, setDeleteMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [updateMessageModal, setUpdateMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [emojiPickerModal, setEmojiPickerModal] = useState({\r\n    isShown: false,\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    if (active != -1) {\r\n      $(\"#connection\" + active).addClass(\"DirectMessages__connections_active\");\r\n      focusLastDiv();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"\");\r\n\r\n    socket.on(\"users__removeconnection\", (data) => {\r\n      const newConnections = connections.filter((connection) => {\r\n        return connection.email !== data.email;\r\n      });\r\n\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, connections: newConnections },\r\n      });\r\n      setConnections(newConnections);\r\n    });\r\n\r\n    socket.on(\"directmessages__deletemessage\", (data) => {\r\n      const newMessages = messages.filter((row) => row._id !== data._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"directmessages__updatemessage\", (data) => {\r\n      const newMessages = messages.map((row) => {\r\n        if (row._id === data._id) {\r\n          return data;\r\n        }\r\n        return row;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"directmessages__newmessage\", (data) => {\r\n      if (\r\n        (user.email == data.senderemail || user.email == data.receiveremail) &&\r\n        (connectionEmail == data.senderemail ||\r\n          connectionEmail == data.receiveremail)\r\n      ) {\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, allMessages: [...messages, { ...data }] },\r\n        });\r\n        setMessages([...messages, { ...data }]);\r\n      }\r\n    });\r\n\r\n    socket.on(\"directmessages__delayedmessages\", (data) => {\r\n      const newMessages = data.delayedMessages.filter((message) => {\r\n        return (\r\n          (user.email === message.senderemail ||\r\n            user.email === message.receiveremail) &&\r\n          (connectionEmail === message.senderemail ||\r\n            connectionEmail === message.receiveremail)\r\n        );\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: [...messages, { ...data }] },\r\n      });\r\n      setMessages([...messages, ...newMessages]);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      focusLastDiv();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n\r\n  const addHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.add(\"DirectMessages__message_hover\");\r\n      editbutton.classList.remove(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const fetchChat = async (email, connectionemail) => {\r\n    const response = await axios.post(\"/fetchalldirectmessages\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n\r\n    setMessages(response.data.allMessages);\r\n\r\n    await axios.post(\"/directmessagesseen\", {\r\n      email: email,\r\n      connectionemail: connectionemail,\r\n    });\r\n  };\r\n\r\n  const sendMessageHandler = async () => {\r\n    if (connectionEmail == \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Recepient...\",\r\n        ModalBody: \"Please Choose a User to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      text: message,\r\n      email: user.email,\r\n      connectionemail: connectionEmail,\r\n      date: date,\r\n      time: time,\r\n    };\r\n    await axios.post(\"/senddirectmessage\", data);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"DirectMessages__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DirectMessages\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".DirectMessages__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"DirectMessages__container\">\r\n        <div className=\"DirectMessages__sidebar w-100 \">\r\n          {connections.map((connection, ind) => {\r\n            return (\r\n              <div\r\n                id={\"connection\" + ind}\r\n                className={`DirectMessages__connections `}\r\n                onClick={() => {\r\n                  if (active != -1) {\r\n                    $(\"#connection\" + active).removeClass(\r\n                      \"DirectMessages__connections_active\"\r\n                    );\r\n                  }\r\n                  setActive(ind);\r\n                  $(\"#connection\" + ind).addClass(\r\n                    \"DirectMessages__connections_active\"\r\n                  );\r\n\r\n                  setConnectionEmail(connection.email);\r\n\r\n                  fetchChat(user.email, connection.email);\r\n                }}\r\n                key={ind}\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <img\r\n                      src={connection.avatarUrl}\r\n                      alt={connection.displayname}\r\n                    />\r\n                    <h5>{connection.email}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"DirectMessages__chat w-100 \">\r\n          <div className=\"DirectMessages__chatarea\">\r\n            {messages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`DirectMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                      onMouseEnter={(e) => {\r\n                        editbutton = e.target.children[0];\r\n                        deletebutton = e.target.children[1];\r\n                        addHoverClass();\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        removeHoverClass();\r\n                      }}\r\n                    >\r\n                      <i\r\n                        class=\"fa fa-pencil-square-o DirectMessages__edit_button DirectMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setUpdateMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                      <i\r\n                        class=\"fa fa-trash DirectMessages__delete_button DirectMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setDeleteMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`DirectMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`DirectMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"DirectMessages__inputarea\">\r\n            <input\r\n              class=\"form-control customform\"\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                  sendMessageHandler();\r\n                }\r\n              }}\r\n            />\r\n            <i class=\"fa fa-paper-plane\" onClick={sendMessageHandler}></i>\r\n            <i\r\n              class=\"fa fa-clock-o\"\r\n              onClick={() => {\r\n                if (connectionEmail == \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Choose a Recepient...\",\r\n                    ModalBody: \"Please Choose a User to chat with...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (message === \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Type a Message...\",\r\n                    ModalBody: \"Please type something to send...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                setTimerModal({\r\n                  isShown: true,\r\n                  message: message,\r\n                  email: user.email,\r\n                  connectionemail: connectionEmail,\r\n                });\r\n              }}\r\n            ></i>\r\n            <i\r\n              class=\"fa fa-smile-o\"\r\n              onClick={() => {\r\n                setEmojiText(\"\");\r\n                setEmojiPickerModal({ isShown: true });\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        email={timermodal.email}\r\n        connectionemail={timermodal.connectionemail}\r\n      />\r\n      <UpdateMessageModal\r\n        isShown={updateMessageModal.isShown}\r\n        setIsShown={setUpdateMessageModal}\r\n        message={updateMessageModal.message}\r\n        editbutton={updateMessageModal.editbutton}\r\n        deletebutton={updateMessageModal.deletebutton}\r\n        connectionemail={connectionEmail}\r\n      />\r\n      <DeleteMessageModal\r\n        isShown={deleteMessageModal.isShown}\r\n        setIsShown={setDeleteMessageModal}\r\n        message={deleteMessageModal.message}\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        editbutton={deleteMessageModal.editbutton}\r\n        deletebutton={deleteMessageModal.deletebutton}\r\n      />\r\n      <EmojiPickerModal\r\n        isShown={emojiPickerModal.isShown}\r\n        setIsShown={setEmojiPickerModal}\r\n        message={message}\r\n        setMessage={setMessage}\r\n        emojiText={emojiText}\r\n        setEmojiText={setEmojiText}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DirectMessages;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst TimerModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  setMessage,\r\n  user,\r\n  group,\r\n}) => {\r\n  const todaydate = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const sendDelayedMessageHandler = async () => {\r\n    const response = await axios.post(\"/delaygroupmessage\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      text: message,\r\n      senderemail: user.email,\r\n      displayname: user.displayname,\r\n      avatarUrl: user.avatarUrl,\r\n      date: date,\r\n      time: time,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n\r\n    if (response.data.status === \"success\") {\r\n      setMessage(\"\");\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      isShown: false,\r\n      message: \"\",\r\n    });\r\n\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delayed Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Choose Date\r\n          </h5>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            value={date}\r\n            min={todaydate}\r\n            onChange={(e) => {\r\n              setDate(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Choose Time\r\n          </h5>\r\n          <input\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control\"\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={time}\r\n            onChange={(e) => {\r\n              setTime(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={sendDelayedMessageHandler}\r\n          >\r\n            Send Delayed Message\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default TimerModal;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst CreateGroupModal = ({ isShown, setIsShown, user }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const createGroupHandler = async () => {\r\n    if (groupName === \"\") {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Name Empty!!!\",\r\n        ModalBody: \"Please enter a valid Group Name\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          ...resultModal,\r\n          isShown: false,\r\n        });\r\n      }, 2000);\r\n    }\r\n\r\n    const response = await axios.post(\"/creategroup\", {\r\n      groupname: groupName,\r\n      imageurl: imageURL,\r\n      user: user,\r\n    });\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: \"Success!!\",\r\n      ModalBody: \"New Group created successfully\",\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 1500);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n    setImageURL(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Create Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Group Name\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Group Picture URL{\" \"}\r\n          </h5>\r\n          <input\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control\"\r\n            type=\"url\"\r\n            name=\"imageurl\"\r\n            onChange={(e) => {\r\n              setImageURL(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={createGroupHandler}\r\n          >\r\n            Create Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CreateGroupModal;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst DeleteGroupModal = ({ isShown, setIsShown, user, group }) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/deletegroup\", {\r\n        groupid: group._id,\r\n        groupname: groupName,\r\n        email: user.email,\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Deleted...\",\r\n        ModalBody: \"You have successfully deleted the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to delete the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n\r\n    setGroupName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Please type the following text <br />\r\n            <b style={{ color: \"red\" }}>{group.name}</b>\r\n            <br /> to confirm deletion...\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={group.name !== groupName}\r\n            onClick={deleteGroupHandler}\r\n          >\r\n            Delete Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default DeleteGroupModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst AddMembersModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused\r\n      ? \"var(--templateColor1)\"\r\n      : \"var(--logoTextColor)\";\r\n    var color = state.isFocused\r\n      ? \"var(--logoTextColor)\"\r\n      : \"var(--templateColor1)\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const addMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/addmembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Added...\",\r\n        ModalBody: \"Add the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to add members to the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Add Members to <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={addMembersHandler}\r\n          >\r\n            Add Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default AddMembersModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveMembersModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused\r\n      ? \"var(--templateColor1)\"\r\n      : \"var(--logoTextColor)\";\r\n    var color = state.isFocused\r\n      ? \"var(--logoTextColor)\"\r\n      : \"var(--templateColor1)\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeMembersHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removemembers\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        members: selectedMembers.map((member) => {\r\n          return {\r\n            displayname: member.displayname,\r\n            email: member.email,\r\n            avatarUrl: member.avatarUrl,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Members Removed...\",\r\n        ModalBody: \"Removed the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to remove members to the group...Check whether you are trying to cremove the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Remove Members from <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeMembersHandler}\r\n          >\r\n            Remove Members\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveMembersModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst MakeAdminsModal = ({ isShown, setIsShown, user, group, connections }) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused\r\n      ? \"var(--templateColor1)\"\r\n      : \"var(--logoTextColor)\";\r\n    var color = state.isFocused\r\n      ? \"var(--logoTextColor)\"\r\n      : \"var(--templateColor1)\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const makeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/makeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Members to Admins in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={makeAdminsHandler}\r\n          >\r\n            Make Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default MakeAdminsModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst RemoveAdminsModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  user,\r\n  group,\r\n  connections,\r\n}) => {\r\n  const [allMembers, setAllMembers] = useState([]);\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllMembers(\r\n      connections.map((connection) => {\r\n        return {\r\n          ...connection,\r\n          value: connection.email,\r\n          label: connection.displayname + \" | \" + connection.email,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  //Handlers\r\n  /**\r\n   * @param {Object} provided -- the component's default styles\r\n   * @param {Object} state -- the component's current state e.g. `isFocused`\r\n   * @returns {Object}\r\n   */\r\n  function styleFn(provided, state) {\r\n    var backgroundColor = state.isFocused\r\n      ? \"var(--templateColor1)\"\r\n      : \"var(--logoTextColor)\";\r\n    var color = state.isFocused\r\n      ? \"var(--logoTextColor)\"\r\n      : \"var(--templateColor1)\";\r\n    return { ...provided, backgroundColor, color };\r\n  }\r\n\r\n  const removeAdminsHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/removeadmins\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        email: user.email,\r\n        admins: selectedMembers.map((member) => {\r\n          return {\r\n            email: member.email,\r\n          };\r\n        }),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Updated Role...\",\r\n        ModalBody: \"Updated the role of the specified members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody:\r\n          \"You don't have sufficient permissions to update the roles of the specified members...Please make sure you are not updating the role of the creator of the group...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--templateColor1)\",\r\n            color: \"var(--logoTextColor)\",\r\n            textShadow: \"2px 2px var(--logoBgColor)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            Convert Admins to Members in <b>{group.name}</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={{ option: styleFn }}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"Choose the members...\"\r\n            onChange={(e) => {\r\n              setSelectedMembers(e);\r\n            }}\r\n            options={allMembers}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={selectedMembers.length === 0}\r\n            onClick={removeAdminsHandler}\r\n          >\r\n            Remove Admins\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RemoveAdminsModal;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\n\r\nconst GroupInfoModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  group,\r\n  email,\r\n  groups,\r\n  setGroups,\r\n  setActiveGroup,\r\n  setActive,\r\n  setMessages,\r\n}) => {\r\n  //States\r\n  const [showAdmin, setShowAdmin] = useState(false);\r\n  const [showMembers, setShowMembers] = useState(false);\r\n  const [admins, setAdmins] = useState([]);\r\n\r\n  //Handlers\r\n  const chooseRoleHandler = (option) => {\r\n    if (option === \"admins\") {\r\n      if (JSON.stringify(group) !== JSON.stringify({})) {\r\n        var completeAdmins = group.members.filter((member) => {\r\n          return group.admin.some((row) => row.email === member.email);\r\n        });\r\n        setAdmins(completeAdmins);\r\n      }\r\n      setShowAdmin(true);\r\n      setShowMembers(false);\r\n    } else if (option === \"members\") {\r\n      setShowAdmin(false);\r\n      setShowMembers(true);\r\n    } else {\r\n      setShowAdmin(false);\r\n      setShowMembers(false);\r\n    }\r\n  };\r\n\r\n  const exitGroupHandler = async () => {\r\n    try {\r\n      if (window.confirm(\"Are you sure?\")) {\r\n        await axios.post(\"/exitgroup\", {\r\n          groupid: group._id,\r\n          groupname: group.name,\r\n          email: email,\r\n        });\r\n\r\n        var newGroups = groups.filter(\r\n          (row) => !(row._id == group._id && row.name == group.name)\r\n        );\r\n        setGroups(newGroups);\r\n        setActiveGroup({});\r\n        setMessages([]);\r\n        setActive(-1);\r\n        handleClose();\r\n      }\r\n    } catch (e) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n    setShowAdmin(false);\r\n    setShowMembers(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>{group.name}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <img src={group.pictureUrl} className=\"GroupInfoModal__picture\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-4\">\r\n            <div className=\"col\">\r\n              <div className=\"input-group\">\r\n                <div\r\n                  className=\"input-group-prepend\"\r\n                  style={{\r\n                    borderRight: \"1px solid var(--logoTextColor)\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    className=\"input-group-text\"\r\n                    style={{\r\n                      backgroundColor: \"var(--modalHeaderBackground)\",\r\n                      color: \"var(--modalHeaderText)\",\r\n                    }}\r\n                  >\r\n                    Owner\r\n                  </span>\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control GroupMessages__info_owner\"\r\n                  value={group.owner}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-4\">\r\n            <div className=\"col\">\r\n              <select\r\n                class=\"form-control GroupMessages__info_select\"\r\n                style={{\r\n                  backgroundColor: \"var(--modalHeaderBackground)\",\r\n                  color: \"var(--modalHeaderText)\",\r\n                }}\r\n                onChange={(e) => {\r\n                  chooseRoleHandler(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"default\" selected>\r\n                  Choose a role to view members\r\n                </option>\r\n                <option value=\"admins\">Admins</option>\r\n                <option value=\"members\">Members</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {showAdmin ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {admins.map((admin) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={admin.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{admin.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{admin.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {showMembers ? (\r\n            <div className=\"row mt-4 GroupInfoModal__container\">\r\n              <div className=\"col\">\r\n                {group.members.map((member) => {\r\n                  return (\r\n                    <div className=\"container\">\r\n                      <div className=\"row mt-2\">\r\n                        <div className=\"col-3\">\r\n                          <img src={member.avatarUrl} />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h4>{member.displayname}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col\">\r\n                              <h6>{member.email}</h6>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={exitGroupHandler}\r\n          >\r\n            Exit Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default GroupInfoModal;\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst DeleteMessageModal = ({\r\n  email,\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  messages,\r\n  setMessages,\r\n  editbutton,\r\n  deletebutton,\r\n  group,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const deleteMessageHandler = async () => {\r\n    try {\r\n      await axios.post(\"/deletegroupmessage\", {\r\n        groupid: group._id,\r\n        groupname: group.name,\r\n        messageid: message._id,\r\n        email: email,\r\n      });\r\n      const updatedMessages = messages.filter((row) => row._id !== message._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: updatedMessages },\r\n      });\r\n      setMessages(updatedMessages);\r\n      handleClose();\r\n    } catch (e) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delete the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Are you sure you want to delete the message?\r\n          </h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={deleteMessageHandler}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default DeleteMessageModal;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst UpdateMessageModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  message,\r\n  editbutton,\r\n  deletebutton,\r\n  senderemail,\r\n  group,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const updateMessageHandler = async () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n\r\n    await axios.post(\"/updategroupmessage\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      message: message,\r\n      newmessage: newMessage,\r\n      senderemail: senderemail,\r\n    });\r\n    setNewMessage(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"DirectMessages__message_hover\");\r\n      editbutton.classList.add(\"DirectMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"DirectMessages__message_hover\");\r\n      deletebutton.classList.add(\"DirectMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    removeHoverClass();\r\n    setIsShown({\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Update the Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h4>Old Message: </h4>\r\n          <b className=\"GroupMessages__oldmessage\" style={{ padding: \"2%\" }}>\r\n            {typeof message === \"object\" ? message.text : \"\"}\r\n          </b>\r\n          <hr />\r\n          <input\r\n            type=\"text\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control\"\r\n            placeholder=\"Enter New Message.\"\r\n            value={newMessage}\r\n            onChange={(e) => {\r\n              setNewMessage(e.target.value);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                updateMessageHandler();\r\n              }\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={updateMessageHandler}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default UpdateMessageModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport \"./GroupMessages.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport DateFormat from \"dateformat\";\r\nimport EmojiPickerModal from \"../Modals/EmojiPickerModal\";\r\n\r\n//Modals\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport TimerModal from \"./TimerModal\";\r\nimport CreateGroupModal from \"./Modals/CreateGroupModal\";\r\nimport DeleteGroupModal from \"./Modals/DeleteGroupModal\";\r\nimport AddMembersModal from \"./Modals/AddMembersModal\";\r\nimport RemoveMembersModal from \"./Modals/RemoveMembersModal\";\r\nimport MakeAdminsModal from \"./Modals/MakeAdminsModal\";\r\nimport RemoveAdminsModal from \"./Modals/RemoveAdminsModal\";\r\nimport GroupInfoModal from \"./Modals/GroupInfoModal\";\r\nimport DeleteMessageModal from \"./DeleteMessageModal\";\r\nimport UpdateMessageModal from \"./UpdateMessageModal\";\r\n\r\nconst GroupMessages = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const user = location.state.user;\r\n  var editbutton = undefined;\r\n  var deletebutton = undefined;\r\n\r\n  //States\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [groups, setGroups] = useState(location.state.groups);\r\n  const [activeGroup, setActiveGroup] = useState({});\r\n  const [active, setActive] = useState(\r\n    location.state.active !== undefined ? location.state.active : -1\r\n  );\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState(location.state.allMessages);\r\n  const [emojiText, setEmojiText] = useState(\"\");\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const [timermodal, setTimerModal] = useState({\r\n    isShown: false,\r\n    message: message,\r\n  });\r\n  const [createGroupModal, setCreateGroupModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [deleteGroupModal, setDeleteGroupModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [addMembersModal, setAddMembersModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [removeMembersModal, setRemoveMembersModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [makeAdminsModal, setMakeAdminsModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [removeAdminsModal, setRemoveAdminsModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [groupInfoModal, setGroupInfoModal] = useState({\r\n    isShown: false,\r\n  });\r\n  const [deleteMessageModal, setDeleteMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [updateMessageModal, setUpdateMessageModal] = useState({\r\n    isShown: false,\r\n    message: \"\",\r\n  });\r\n  const [emojiPickerModal, setEmojiPickerModal] = useState({\r\n    isShown: false,\r\n  });\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    if (active != -1) {\r\n      setActiveGroup(location.state.activeGroup);\r\n      $(\"#connection\" + active).addClass(\"GroupMessages__connections_active\");\r\n      focusLastDiv();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(\"\");\r\n\r\n    socket.on(\"groupmessages__newgroup\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isMember = data.members.some((member) => {\r\n          return member.email === user.email;\r\n        });\r\n\r\n        if (isMember) {\r\n          var groupExists = groups.some(\r\n            (group) => group._id === data._id && group.name === data.name\r\n          );\r\n          var newGroups = [];\r\n          if (groupExists) {\r\n            newGroups = groups.map((group) => {\r\n              if (group._id === data._id && group.name === data.name) {\r\n                group.members = data.members;\r\n              }\r\n              return group;\r\n            });\r\n          } else {\r\n            newGroups = [...groups, data];\r\n          }\r\n          history.replace({\r\n            ...history.location,\r\n            state: { ...location.state, groups: newGroups },\r\n          });\r\n          setGroups(newGroups);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__deletegroup\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isMember = groups.some((group) => {\r\n          return group._id === data._id && group.name === data.name;\r\n        });\r\n        if (isMember) {\r\n          var newGroups = groups.filter((group) => {\r\n            return !(group._id === data._id && group.name === data.name);\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: {\r\n              ...location.state,\r\n              active: -1,\r\n              activeGroup: {},\r\n              groups: newGroups,\r\n              allMessages: [],\r\n            },\r\n          });\r\n          setGroups(newGroups);\r\n          setActive(-1);\r\n          setActiveGroup({});\r\n          setMessages([]);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__removemembers\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var isPartOfRemovedGroup = groups.some((group) => {\r\n          return (\r\n            group._id === data._id &&\r\n            group.name === data.name &&\r\n            !data.members.some((member) => member.email === user.email)\r\n          );\r\n        });\r\n\r\n        if (isPartOfRemovedGroup) {\r\n          var newGroups = groups.filter((group) => {\r\n            return !(group._id === data._id && group.name === data.name);\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: {\r\n              ...location.state,\r\n              active: -1,\r\n              activeGroup: {},\r\n              groups: newGroups,\r\n              allMessages: [],\r\n            },\r\n          });\r\n          setGroups(newGroups);\r\n          setActive(-1);\r\n          setActiveGroup({});\r\n          setMessages([]);\r\n        } else {\r\n          var newGroups = groups.map((group) => {\r\n            if (group._id === data._id && group.name === data.name) {\r\n              group.members = data.members;\r\n            }\r\n            return group;\r\n          });\r\n\r\n          history.replace({\r\n            ...history.location,\r\n            state: { ...location.state, groups: newGroups },\r\n          });\r\n          setGroups(newGroups);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__makeadmins\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var newGroups = groups.map((group) => {\r\n          if (group._id === data._id && group.name === data.name) {\r\n            group.admin = data.admin;\r\n          }\r\n          return group;\r\n        });\r\n\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, groups: newGroups },\r\n        });\r\n        setGroups(newGroups);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__removeadmins\", (data) => {\r\n      if (data && Object.keys(data).length > 0) {\r\n        var newGroups = groups.map((group) => {\r\n          if (group._id === data._id && group.name === data.name) {\r\n            group.admin = data.admin;\r\n          }\r\n          return group;\r\n        });\r\n\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, groups: newGroups },\r\n        });\r\n        setGroups(newGroups);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__deletemessage\", (data) => {\r\n      const newMessages = messages.filter((row) => row._id !== data._id);\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"groupmessages__updatemessage\", (data) => {\r\n      const newMessages = messages.map((row) => {\r\n        if (row._id === data.message._id) {\r\n          row.text = data.message.text;\r\n        }\r\n        return row;\r\n      });\r\n      history.replace({\r\n        ...history.location,\r\n        state: { ...location.state, allMessages: newMessages },\r\n      });\r\n      setMessages(newMessages);\r\n    });\r\n\r\n    socket.on(\"groupmessages__newmessage\", (data) => {\r\n      if (activeGroup._id == data._id && activeGroup.name == data.name) {\r\n        setMessages([\r\n          ...messages,\r\n          {\r\n            text: data.text,\r\n            displayname: data.displayname,\r\n            senderemail: data.senderemail,\r\n            avatarUrl: data.avatarUrl,\r\n            date: data.date,\r\n            time: data.time,\r\n            _id: data.messageid,\r\n          },\r\n        ]);\r\n      }\r\n    });\r\n\r\n    socket.on(\"groupmessages__delayedmessages\", (data) => {\r\n      if (activeGroup._id === data._id && activeGroup.name === data.name) {\r\n        const newMessages = data.delayedMessages;\r\n        history.replace({\r\n          ...history.location,\r\n          state: { ...location.state, allMessages: newMessages },\r\n        });\r\n        setMessages([...messages, ...newMessages]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      focusLastDiv();\r\n    };\r\n  });\r\n\r\n  //Handlers\r\n  const addHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.add(\"GroupMessages__message_hover\");\r\n      editbutton.classList.remove(\"GroupMessages__message_non_hover\");\r\n      deletebutton.classList.add(\"GroupMessages__message_hover\");\r\n      deletebutton.classList.remove(\"GroupMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const removeHoverClass = () => {\r\n    if (typeof editbutton === \"object\" && typeof deletebutton === \"object\") {\r\n      editbutton.classList.remove(\"GroupMessages__message_hover\");\r\n      editbutton.classList.add(\"GroupMessages__message_non_hover\");\r\n      deletebutton.classList.remove(\"GroupMessages__message_hover\");\r\n      deletebutton.classList.add(\"GroupMessages__message_non_hover\");\r\n    }\r\n  };\r\n\r\n  const isGroupClicked = () => {\r\n    if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n      setModal({\r\n        isShown: true.valueOf,\r\n        ModalTitle: \"Choose a group...\",\r\n        ModalBody: \"Please click on a group to delete...\",\r\n      });\r\n      setTimeout(() => {\r\n        setModal({ ...modal, isShown: false });\r\n      }, 1500);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const fetchGroupChat = async (group) => {\r\n    const response = await axios.post(\"/fetchallgroupmessages\", {\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n      email: user.email,\r\n    });\r\n\r\n    setMessages(response.data.allMessages);\r\n\r\n    await axios.post(\"/groupmessagesseen\", {\r\n      email: user.email,\r\n      groupid: group._id,\r\n      groupname: group.name,\r\n    });\r\n  };\r\n\r\n  const sendMessageHandler = async () => {\r\n    if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Choose a Group...\",\r\n        ModalBody: \"Please Choose a Group to chat with...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (message === \"\") {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Type a Message...\",\r\n        ModalBody: \"Please type something to send...\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const data = {\r\n      groupid: activeGroup._id,\r\n      groupname: activeGroup.name,\r\n      text: message,\r\n      displayname: user.displayname,\r\n      senderemail: user.email,\r\n      avatarUrl: user.avatarUrl,\r\n      date: date,\r\n      time: time,\r\n    };\r\n\r\n    await axios.post(\"/sendgroupmessage\", data);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  const focusLastDiv = () => {\r\n    var objDiv = document.getElementsByClassName(\"GroupMessages__chatarea\")[0];\r\n    if (objDiv) {\r\n      objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"GroupMessages\">\r\n      <i\r\n        class=\"fa fa-bars\"\r\n        onClick={() => {\r\n          $(\".GroupMessages__sidebar\").toggle(500);\r\n        }}\r\n      ></i>\r\n      <div className=\"GroupMessages__container\">\r\n        <div className=\"GroupMessages__sidebar w-100 \">\r\n          <div className=\"GroupMessages__sidebar_top\">\r\n            {groups.map((group, ind) => {\r\n              return (\r\n                <div\r\n                  id={\"connection\" + ind}\r\n                  className={`GroupMessages__connections `}\r\n                  onClick={() => {\r\n                    if (active != -1) {\r\n                      $(\"#connection\" + active).removeClass(\r\n                        \"GroupMessages__connections_active\"\r\n                      );\r\n                    }\r\n                    setActive(ind);\r\n                    setActiveGroup(group);\r\n\r\n                    $(\"#connection\" + ind).addClass(\r\n                      \"GroupMessages__connections_active\"\r\n                    );\r\n\r\n                    fetchGroupChat(group);\r\n                  }}\r\n                  key={ind}\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <img src={group.pictureUrl} alt={\".\"} />\r\n                      <h5>{group.name}</h5>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                      <i\r\n                        className=\"fa fa-info-circle GroupMessages__info_button\"\r\n                        onClick={() => {\r\n                          setActive(ind);\r\n                          setActiveGroup(group);\r\n                          setGroupInfoModal({\r\n                            isShown: true,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"GroupMessages__sidebar_bottom\">\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"creategroup\"\r\n                  onClick={(e) => {\r\n                    setCreateGroupModal({\r\n                      isShown: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  Create Group\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"deletegroup\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setDeleteGroupModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Delete Group\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"addmembers\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setAddMembersModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Add Members\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"removemembers\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setRemoveMembersModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Remove Members\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row d-flex justify-content-around\">\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"makeadmins\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setMakeAdminsModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Make Admins\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"GroupMessages__button\"\r\n                  name=\"removeadmins\"\r\n                  onClick={(e) => {\r\n                    if (isGroupClicked()) {\r\n                      setRemoveAdminsModal({\r\n                        isShown: true,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Remove Admins\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"GroupMessages__chat w-100 \">\r\n          <div className=\"GroupMessages__chatarea\">\r\n            {messages.map((message, ind) => {\r\n              return (\r\n                <div className=\"row\" key={ind}>\r\n                  <div className=\"col\">\r\n                    <p\r\n                      className={`GroupMessages__message ${\r\n                        message.senderemail == user.email\r\n                          ? \"sender\"\r\n                          : \"receiver\"\r\n                      }`}\r\n                      onMouseEnter={(e) => {\r\n                        editbutton = e.target.children[0];\r\n                        deletebutton = e.target.children[1];\r\n                        addHoverClass();\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        removeHoverClass();\r\n                      }}\r\n                    >\r\n                      <i\r\n                        class=\"fa fa-pencil-square-o GroupMessages__edit_button GroupMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setUpdateMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n                      <i\r\n                        class=\"fa fa-trash GroupMessages__delete_button GroupMessages__message_non_hover\"\r\n                        onClick={() => {\r\n                          setDeleteMessageModal({\r\n                            isShown: true,\r\n                            message: message,\r\n                            editbutton: editbutton,\r\n                            deletebutton: deletebutton,\r\n                          });\r\n                        }}\r\n                      ></i>\r\n\r\n                      {message.text}\r\n                    </p>\r\n                    {message.senderemail == user.email ? (\r\n                      <>\r\n                        <p\r\n                          className={`GroupMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.displayname} &nbsp;&nbsp;\r\n                        </p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.displayname} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__date ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.date} &nbsp;&nbsp;\r\n                        </p>\r\n                        <p\r\n                          className={`GroupMessages__time ${\r\n                            message.senderemail == user.email\r\n                              ? \"sender\"\r\n                              : \"receiver\"\r\n                          }`}\r\n                        >\r\n                          {message.time}\r\n                        </p>{\" \"}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"GroupMessages__inputarea\">\r\n            <input\r\n              class=\"form-control customform\"\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                  sendMessageHandler();\r\n                }\r\n              }}\r\n            />\r\n            <i class=\"fa fa-paper-plane\" onClick={sendMessageHandler}></i>\r\n            <i\r\n              class=\"fa fa-clock-o\"\r\n              onClick={() => {\r\n                if (JSON.stringify(activeGroup) === JSON.stringify({})) {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Choose a Group...\",\r\n                    ModalBody: \"Please Choose a Group to chat with...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                if (message === \"\") {\r\n                  setModal({\r\n                    isShown: true,\r\n                    ModalTitle: \"Type a Message...\",\r\n                    ModalBody: \"Please type something to send...\",\r\n                  });\r\n                  return;\r\n                }\r\n\r\n                setTimerModal({\r\n                  isShown: true,\r\n                  message: message,\r\n                  email: user.email,\r\n                  group: activeGroup,\r\n                });\r\n              }}\r\n            ></i>\r\n            <i\r\n              class=\"fa fa-smile-o\"\r\n              onClick={() => {\r\n                setEmojiText(\"\");\r\n                setEmojiPickerModal({ isShown: true });\r\n              }}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n      <TimerModal\r\n        isShown={timermodal.isShown}\r\n        setIsShown={setTimerModal}\r\n        message={timermodal.message}\r\n        setMessage={setMessage}\r\n        user={user}\r\n        group={activeGroup}\r\n      />\r\n      <CreateGroupModal\r\n        isShown={createGroupModal.isShown}\r\n        setIsShown={setCreateGroupModal}\r\n        user={user}\r\n      />\r\n      <DeleteGroupModal\r\n        isShown={deleteGroupModal.isShown}\r\n        setIsShown={setDeleteGroupModal}\r\n        group={activeGroup}\r\n        user={user}\r\n      />\r\n      <AddMembersModal\r\n        isShown={addMembersModal.isShown}\r\n        setIsShown={setAddMembersModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <RemoveMembersModal\r\n        isShown={removeMembersModal.isShown}\r\n        setIsShown={setRemoveMembersModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <MakeAdminsModal\r\n        isShown={makeAdminsModal.isShown}\r\n        setIsShown={setMakeAdminsModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n      <RemoveAdminsModal\r\n        isShown={removeAdminsModal.isShown}\r\n        setIsShown={setRemoveAdminsModal}\r\n        group={activeGroup}\r\n        user={user}\r\n        connections={connections}\r\n      />\r\n\r\n      <GroupInfoModal\r\n        isShown={groupInfoModal.isShown}\r\n        setIsShown={setGroupInfoModal}\r\n        group={activeGroup}\r\n        email={user.email}\r\n        groups={groups}\r\n        setGroups={setGroups}\r\n        setActiveGroup={setActiveGroup}\r\n        setActive={setActive}\r\n        setMessages={setMessages}\r\n      />\r\n      <UpdateMessageModal\r\n        isShown={updateMessageModal.isShown}\r\n        setIsShown={setUpdateMessageModal}\r\n        message={updateMessageModal.message}\r\n        editbutton={updateMessageModal.editbutton}\r\n        deletebutton={updateMessageModal.deletebutton}\r\n        senderemail={user.email}\r\n        group={activeGroup}\r\n      />\r\n      <DeleteMessageModal\r\n        isShown={deleteMessageModal.isShown}\r\n        setIsShown={setDeleteMessageModal}\r\n        message={deleteMessageModal.message}\r\n        messages={messages}\r\n        setMessages={setMessages}\r\n        group={activeGroup}\r\n        email={user.email}\r\n        editbutton={deleteMessageModal.editbutton}\r\n        deletebutton={deleteMessageModal.deletebutton}\r\n      />\r\n      <EmojiPickerModal\r\n        isShown={emojiPickerModal.isShown}\r\n        setIsShown={setEmojiPickerModal}\r\n        message={message}\r\n        setMessage={setMessage}\r\n        emojiText={emojiText}\r\n        setEmojiText={setEmojiText}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupMessages;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\n\r\nconst CreateGroupModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  email,\r\n  allEmails,\r\n  setConnections,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupEmails, setGroupEmails] = useState([]);\r\n\r\n  //Styles\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      background: \"var(--templateColor1)\",\r\n      borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\r\n      borderColor: state.isFocused\r\n        ? \"var(--templateColor2)\"\r\n        : \"var(--templateColor1)\",\r\n      boxShadow: state.isFocused ? null : null,\r\n      \"&:hover\": { backgroundColor: \"var(--templateColor3)\" },\r\n    }),\r\n    option: (base) => ({\r\n      ...base,\r\n      backgroundColor: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"var(--templateColor3)\",\r\n        color: \"var(--logoBgColor)\",\r\n      },\r\n    }),\r\n    noOptionsMessage: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      borderRadius: 0,\r\n      marginTop: 0,\r\n    }),\r\n    menuList: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n      padding: 0,\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n      fontWeight: \"bold\",\r\n    }),\r\n    multiValue: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    multiValueLabel: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    input: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n  };\r\n\r\n  //Handlers\r\n  const createGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/createemailgroup\", {\r\n        name: groupName,\r\n        owner: email,\r\n        receiveremails: groupEmails.map((email) => email.value),\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Group Created...\",\r\n        ModalBody:\r\n          \"Created a group with \" +\r\n          groupEmails.length +\r\n          \" members successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Group Exists ⚠\",\r\n        ModalBody: \"Cannot create another group with the same name.\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = async () => {\r\n    var response1 = await axios.post(\"/fetchconnections\", {\r\n      email: email,\r\n    });\r\n\r\n    const response2 = await axios.post(\"/getemailgroups\", {\r\n      owner: email,\r\n    });\r\n\r\n    const allgroups = response2.data.allgroups.map((group) => ({\r\n      email: group.name,\r\n      isGroup: true,\r\n    }));\r\n\r\n    history.replace({\r\n      ...history.location,\r\n      state: {\r\n        ...location.state,\r\n        connections: [...response1.data.connections, ...allgroups],\r\n      },\r\n    });\r\n    setConnections([...response1.data.connections, ...allgroups]);\r\n\r\n    setGroupEmails([]);\r\n    setGroupName(\"\");\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            <b>Create Email Group</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--modalTextShadow)\" }}>\r\n            Group Name\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            name=\"groupname\"\r\n            style={{\r\n              backgroundColor: \"var(--modalHeaderBackground)\",\r\n              color: \"var(--modalHeaderText)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            onChange={(e) => {\r\n              setGroupName(e.target.value);\r\n            }}\r\n          />\r\n          <Select\r\n            maxMenuHeight=\"35vh\"\r\n            styles={customStyles}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"To: \"\r\n            noOptionsMessage={() => \"No Recipients.\"}\r\n            onChange={(e) => {\r\n              setGroupEmails(e);\r\n            }}\r\n            value={groupEmails}\r\n            options={allEmails}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={groupEmails.length === 0 || groupName === \"\"}\r\n            onClick={createGroupHandler}\r\n          >\r\n            Create Email Group\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CreateGroupModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../../Modals/TemplateModal\";\r\nimport $ from \"jquery\";\r\n\r\nconst DeleteGroupModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  email,\r\n  allgroups,\r\n  setConnections,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [groupNames, setGroupNames] = useState([]);\r\n\r\n  //Styles\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      background: \"var(--templateColor1)\",\r\n      borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\r\n      borderColor: state.isFocused\r\n        ? \"var(--templateColor2)\"\r\n        : \"var(--templateColor1)\",\r\n      boxShadow: state.isFocused ? null : null,\r\n      \"&:hover\": { backgroundColor: \"var(--templateColor3)\" },\r\n    }),\r\n    option: (base) => ({\r\n      ...base,\r\n      backgroundColor: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"var(--templateColor3)\",\r\n        color: \"var(--logoBgColor)\",\r\n      },\r\n    }),\r\n    noOptionsMessage: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      borderRadius: 0,\r\n      marginTop: 0,\r\n    }),\r\n    menuList: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n      padding: 0,\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n      fontWeight: \"bold\",\r\n    }),\r\n    multiValue: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor2)\",\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    multiValueLabel: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    input: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n  };\r\n\r\n  //Handlers\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await axios.post(\"/deleteemailgroups\", {\r\n        emailgroups: groupNames.map((group) => group.value),\r\n        owner: email,\r\n      });\r\n\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \" Groups Deleted...\",\r\n        ModalBody: \"Deleted \" + groupNames.length + \" Groups successfully...\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 1500);\r\n    } catch (e) {\r\n      setResultModal({\r\n        isShown: true,\r\n        ModalTitle: \"Not Authorized ⚠\",\r\n        ModalBody: \"You are not the owner of the group.\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setResultModal({\r\n          isShown: false,\r\n        });\r\n\r\n        handleClose();\r\n      }, 2500);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    const temp = location.state.connections;\r\n    history.replace({\r\n      ...history.location,\r\n      state: {\r\n        ...location.state,\r\n        connections: temp.filter((connection) => {\r\n          return !groupNames.some((group) => {\r\n            return group.value === connection.email;\r\n          });\r\n        }),\r\n      },\r\n    });\r\n    setConnections(\r\n      temp.filter((connection) => {\r\n        return !groupNames.some((group) => {\r\n          return group.value === connection.email;\r\n        });\r\n      })\r\n    );\r\n    setGroupNames([]);\r\n    setIsShown({\r\n      ...isShown,\r\n      isShown: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={isShown}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--modalHeaderBackground)\",\r\n            color: \"var(--modalHeaderText)\",\r\n            textShadow: \"2px 2px var(--modalTextShadow)\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            <b>Delete Email Groups</b>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <Select\r\n            styles={customStyles}\r\n            isMulti={true}\r\n            isSearchable={true}\r\n            placeholder=\"To: \"\r\n            noOptionsMessage={() => \"No Groups.\"}\r\n            onChange={(e) => {\r\n              setGroupNames(e);\r\n            }}\r\n            value={groupNames}\r\n            options={allgroups}\r\n          />\r\n          {groupNames.map((group) => (\r\n            <div>\r\n              <b>{group.name + \":\"}</b>\r\n              <br />\r\n              {group.recipients.map((email) => {\r\n                return (\r\n                  <div>\r\n                    <b>{email}</b>\r\n                    <br />\r\n                  </div>\r\n                );\r\n              })}\r\n              <hr />\r\n            </div>\r\n          ))}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            disabled={groupNames.length === 0}\r\n            onClick={deleteGroupHandler}\r\n          >\r\n            Delete\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--modalButtonBackground)\",\r\n              color: \"var(--modalButtonText)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default DeleteGroupModal;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DateFormat from \"dateformat\";\r\nimport axios from \"axios\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\n\r\nconst TimerModal = ({\r\n  isShown,\r\n  setIsShown,\r\n  email,\r\n  toEmails,\r\n  setToEmails,\r\n  subject,\r\n  setSubject,\r\n  newMailBody,\r\n  setNewMailBody,\r\n  newMailAttachments,\r\n  setNewMailAttachments,\r\n}) => {\r\n  const todaydate = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const [resultModal, setResultModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n\r\n  const sendDelayedEmailHandler = async () => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < newMailAttachments.length; i++) {\r\n      formData.append(\"customfiles\", newMailAttachments[i]);\r\n    }\r\n\r\n    formData.append(\"text\", newMailBody);\r\n    formData.append(\"email\", email);\r\n    formData.append(\r\n      \"toemails\",\r\n      JSON.stringify(toEmails.map((email) => email.value))\r\n    );\r\n    formData.append(\"subject\", subject);\r\n    formData.append(\"date\", date);\r\n    formData.append(\"time\", time);\r\n\r\n    const response = await axios.post(\"/delaymail\", formData);\r\n\r\n    setResultModal({\r\n      ...resultModal,\r\n      isShown: true,\r\n      ModalTitle: response.data.ModalTitle,\r\n      ModalBody: response.data.ModalBody,\r\n    });\r\n\r\n    if (response.data.status === \"success\") {\r\n      setToEmails([]);\r\n      setSubject([]);\r\n      setNewMailBody([]);\r\n      setNewMailAttachments([]);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setResultModal({\r\n        ...resultModal,\r\n        isShown: false,\r\n      });\r\n\r\n      handleClose();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsShown({\r\n      isShown: false,\r\n      message: \"\",\r\n    });\r\n\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={isShown} onHide={handleClose} backdrop=\"static\">\r\n        <Modal.Header\r\n          closeButton\r\n          style={{\r\n            backgroundColor: \"var(--templateColor1)\",\r\n            color: \"var(--logoTextColor)\",\r\n            textShadow: \"2px 2px var(--logoBgColor)\",\r\n          }}\r\n        >\r\n          <Modal.Title>Delayed Email</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ fontWeight: \"bold\" }}>\r\n          <h5 style={{ textShadow: \"1px 1px var(--templateColor1)\" }}>\r\n            Choose Date\r\n          </h5>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n            }}\r\n            class=\"form-control mb-4\"\r\n            value={date}\r\n            min={todaydate}\r\n            onChange={(e) => {\r\n              setDate(e.target.value);\r\n            }}\r\n          />\r\n          <h5 style={{ textShadow: \"1px 1px var(--templateColor1)\" }}>\r\n            Choose Time\r\n          </h5>\r\n          <input\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n            }}\r\n            class=\"form-control\"\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={time}\r\n            onChange={(e) => {\r\n              setTime(e.target.value);\r\n            }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={sendDelayedEmailHandler}\r\n          >\r\n            Send Delayed Email\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"var(--templateColor1)\",\r\n              color: \"var(--logoTextColor)\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <TemplateModal\r\n        isShown={resultModal.isShown}\r\n        setIsShown={setResultModal}\r\n        ModalTitle={resultModal.ModalTitle}\r\n        ModalBody={resultModal.ModalBody}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default TimerModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Emails.css\";\r\nimport $ from \"jquery\";\r\nimport EmojiPickerModal from \"../Modals/EmojiPickerModal\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-select\";\r\nimport TemplateModal from \"../Modals/TemplateModal\";\r\nimport DateFormat from \"dateformat\";\r\nimport CreateGroupModal from \"./Modals/CreateGroupModal\";\r\nimport DeleteGroupModal from \"./Modals/DeleteGroupModal\";\r\nimport TimerModal from \"./TimerModal\";\r\n\r\nconst Emails = () => {\r\n  const location = useLocation();\r\n  const user = location.state.user;\r\n  const [connections, setConnections] = useState(location.state.connections);\r\n  const [modal, setModal] = useState({\r\n    isShown: false,\r\n    ModalTitle: \"\",\r\n    ModalBody: \"\",\r\n  });\r\n  const [allEmails, setAllEmails] = useState([]);\r\n\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [showNewMail, setShowNewMail] = useState(false);\r\n  const [showInbox, setShowInbox] = useState(true);\r\n  const [showSent, setShowSent] = useState(false);\r\n  const [timerModal, setTimerModal] = useState({ isShown: false });\r\n  const [emojiText, setEmojiText] = useState(\"\");\r\n  const [emojiPickerModal, setEmojiPickerModal] = useState({\r\n    isShown: false,\r\n  });\r\n\r\n  const [newMailBody, setNewMailBody] = useState(\"\");\r\n  const [newMailAttachments, setNewMailAttachments] = useState([]);\r\n  const [toEmails, setToEmails] = useState([]);\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [createGroupModal, setCreateGroupModal] = useState({ isShown: false });\r\n  const [deleteGroupModal, setDeleteGroupModal] = useState({\r\n    isShown: false,\r\n    allgroups: [],\r\n  });\r\n  const [sentMails, setSentMails] = useState([]);\r\n  const [inboxMails, setInboxMails] = useState(location.state.inboxMails);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    setAllEmails(\r\n      connections.map((connection) => {\r\n        return {\r\n          value: connection.email,\r\n          label: connection.email,\r\n          isGroup: connection.isGroup,\r\n        };\r\n      })\r\n    );\r\n  }, [connections]);\r\n\r\n  //Styles\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      background: \"var(--templateColor2)\",\r\n      borderRadius: state.isFocused ? \"3px 3px 0 0\" : 3,\r\n      borderColor: state.isFocused\r\n        ? \"var(--templateColor1)\"\r\n        : \"var(--templateColor2)\",\r\n      boxShadow: state.isFocused ? null : null,\r\n      \"&:hover\": { backgroundColor: \"var(--templateColor3)\" },\r\n    }),\r\n    option: (base) => ({\r\n      ...base,\r\n      backgroundColor: \"var(--templateColor1)\",\r\n      color: \"var(--logoTextColor)\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"var(--templateColor3)\",\r\n        color: \"var(--logoBgColor)\",\r\n      },\r\n    }),\r\n    noOptionsMessage: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      borderRadius: 0,\r\n      marginTop: 0,\r\n    }),\r\n    menuList: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor1)\",\r\n      color: \"var(--logoTextColor)\",\r\n      padding: 0,\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n      fontWeight: \"bold\",\r\n    }),\r\n    multiValue: (base) => ({\r\n      ...base,\r\n      background: \"var(--templateColor1)\",\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    multiValueLabel: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n    input: (base) => ({\r\n      ...base,\r\n      color: \"var(--logoTextColor)\",\r\n    }),\r\n  };\r\n\r\n  //Handlers\r\n\r\n  const sendMailHandler = async () => {\r\n    if (toEmails.length == 0) {\r\n      setModal({\r\n        isShown: true,\r\n        ModalTitle: \"Empty Recipients\",\r\n        ModalBody: \"Please choose some Recipients to send mail to.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const date = DateFormat(new Date(), \"yyyy-mm-dd\");\r\n    const time = DateFormat(new Date(), \"HH:MM\");\r\n\r\n    const formData = new FormData();\r\n    for (let i = 0; i < newMailAttachments.length; i++) {\r\n      formData.append(\"customfiles\", newMailAttachments[i]);\r\n    }\r\n    formData.append(\"email\", user.email);\r\n    formData.append(\r\n      \"toemails\",\r\n      JSON.stringify(toEmails.map((email) => email.value))\r\n    );\r\n    formData.append(\"date\", date);\r\n    formData.append(\"time\", time);\r\n    formData.append(\"subject\", subject);\r\n    formData.append(\"text\", newMailBody);\r\n\r\n    await axios.post(\"/sendmail\", formData, {\r\n      \"content-type\": \"multipart/form-data\",\r\n    });\r\n\r\n    setModal({\r\n      isShown: true,\r\n      ModalTitle: \"Email Sent\",\r\n      ModalBody: \"Email has been sent successfully\",\r\n    });\r\n\r\n    setToEmails([]);\r\n    setSubject([]);\r\n    setNewMailAttachments([]);\r\n    setNewMailBody(\"\");\r\n  };\r\n\r\n  const deleteSentMailHandler = async (mailid) => {\r\n    await axios.post(\"deletesentmail\", { mailid: mailid });\r\n    setSentMails(sentMails.filter((mail) => mail._id !== mailid));\r\n  };\r\n\r\n  const deleteAllSentMailsHandler = async () => {\r\n    await axios.post(\"deleteallsentmails\", { email: user.email });\r\n    setSentMails([]);\r\n  };\r\n\r\n  const deleteInboxMailHandler = async (mailid) => {\r\n    await axios.post(\"deleteinboxmail\", { mailid: mailid, email: user.email });\r\n    setInboxMails(inboxMails.filter((mail) => mail._id !== mailid));\r\n  };\r\n\r\n  const deleteAllInboxMailsHandler = async () => {\r\n    await axios.post(\"deleteallinboxmails\", { email: user.email });\r\n    setInboxMails([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Emails\">\r\n      <div className=\"Emails__expand_icon\">\r\n        <i\r\n          class=\"fa fa-bars\"\r\n          onClick={() => {\r\n            setShowMenu(!showMenu);\r\n          }}\r\n        ></i>\r\n      </div>\r\n      <div className=\"Emails__icon_header\" hidden={!showMenu}>\r\n        <i\r\n          class=\"fa fa-plus\"\r\n          title=\"New Mail\"\r\n          onClick={() => {\r\n            setShowNewMail(true);\r\n            setShowInbox(false);\r\n            setShowSent(false);\r\n            setShowMenu(false);\r\n          }}\r\n        ></i>\r\n        <i\r\n          class=\"fa fa-inbox\"\r\n          title=\"Inbox\"\r\n          onClick={async () => {\r\n            const response = await axios.post(\"/fetchinboxmail\", {\r\n              email: user.email,\r\n            });\r\n\r\n            setInboxMails(response.data.emails);\r\n            setShowNewMail(false);\r\n            setShowInbox(true);\r\n            setShowSent(false);\r\n            setShowMenu(false);\r\n          }}\r\n        ></i>\r\n        <i\r\n          class=\"fa fa-paper-plane\"\r\n          title=\"Sent\"\r\n          onClick={async () => {\r\n            const response = await axios.post(\"/fetchsentmail\", {\r\n              email: user.email,\r\n            });\r\n\r\n            setSentMails(response.data.emails);\r\n\r\n            setShowNewMail(false);\r\n            setShowInbox(false);\r\n            setShowSent(true);\r\n            setShowMenu(false);\r\n          }}\r\n        ></i>\r\n        <i\r\n          class=\"fa fa-users\"\r\n          title=\"Create Email-Group\"\r\n          onClick={() => {\r\n            setCreateGroupModal({ isShown: true });\r\n          }}\r\n        ></i>\r\n        <i\r\n          class=\"fa fa-trash-o\"\r\n          title=\"Delete Email Group\"\r\n          onClick={async () => {\r\n            const response = await axios.post(\"/getemailgroups\", {\r\n              owner: user.email,\r\n            });\r\n            const allgroups = response.data.allgroups.map((row) => ({\r\n              name: row.name,\r\n              owner: row.owner,\r\n              recipients: row.receiveremails,\r\n              label: row.name,\r\n              value: row.name,\r\n            }));\r\n            setDeleteGroupModal({\r\n              isShown: true,\r\n              allgroups: allgroups,\r\n            });\r\n          }}\r\n        ></i>\r\n      </div>\r\n\r\n      <div className=\"Emails__NewMail_container\" hidden={!showNewMail}>\r\n        <Select\r\n          maxMenuHeight=\"35vh\"\r\n          className=\"customselect\"\r\n          styles={customStyles}\r\n          isMulti={true}\r\n          isSearchable={true}\r\n          placeholder=\"To: \"\r\n          noOptionsMessage={() => \"No Recipients.\"}\r\n          onChange={(e) => {\r\n            setToEmails(e);\r\n          }}\r\n          value={toEmails}\r\n          options={allEmails}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={subject}\r\n          onChange={(e) => {\r\n            setSubject(e.target.value);\r\n          }}\r\n          placeholder=\"Subject: \"\r\n          className=\"form-control\"\r\n        />\r\n        <textarea\r\n          className=\"form-control body\"\r\n          placeholder=\"Body: \"\r\n          value={newMailBody}\r\n          onChange={(e) => {\r\n            setNewMailBody(e.target.value);\r\n          }}\r\n        />\r\n        <div className=\"Emails__NewMail_bottombar\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control attachments\"\r\n            onChange={(e) => {\r\n              if (typeof e.target.files[0] !== \"undefined\") {\r\n                setNewMailAttachments([\r\n                  ...newMailAttachments,\r\n                  e.target.files[0],\r\n                ]);\r\n                setNewMailBody(\r\n                  newMailBody + \"\\nAttachment: \" + e.target.files[0].name + \"\\n\"\r\n                );\r\n              }\r\n            }}\r\n          />\r\n          <i\r\n            class=\"fa fa-paperclip\"\r\n            title=\"Attachments\"\r\n            onClick={() => {\r\n              $(\".attachments\").trigger(\"click\");\r\n            }}\r\n          ></i>\r\n          <i\r\n            class=\"fa fa-trash\"\r\n            title=\"Delete Attachments\"\r\n            onClick={() => {\r\n              $(\".attachments\").val(null);\r\n              setNewMailAttachments([]);\r\n              setNewMailBody(\r\n                newMailBody\r\n                  .split(\"\\n\")\r\n                  .filter((line) => {\r\n                    return line.indexOf(\"Attachment: \") == -1;\r\n                  })\r\n                  .filter((line) => {\r\n                    return line !== \"\";\r\n                  })\r\n                  .join(\"\\n\")\r\n              );\r\n            }}\r\n          ></i>\r\n          <i\r\n            class=\"fa fa-smile-o\"\r\n            title=\"Emojis\"\r\n            onClick={() => {\r\n              setEmojiText(\"\");\r\n              setEmojiPickerModal({ isShown: true });\r\n            }}\r\n          ></i>\r\n          <i\r\n            class=\"fa fa-clock-o\"\r\n            title=\"Send Delay Email\"\r\n            onClick={() => {\r\n              setTimerModal({ isShown: true });\r\n            }}\r\n          ></i>\r\n          <i\r\n            class=\"fa fa-arrow-right\"\r\n            onClick={sendMailHandler}\r\n            title=\"Send Email\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Emails__Inbox_container\" hidden={!showInbox}>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            deleteAllInboxMailsHandler();\r\n          }}\r\n          className=\"form-control customform\"\r\n        >\r\n          Clear Inbox\r\n        </button>\r\n        <div>\r\n          {inboxMails.length === 0 ? (\r\n            <h1 className=\"Emails__emptymail\">No Mails</h1>\r\n          ) : (\r\n            inboxMails.map((mail) => {\r\n              return (\r\n                <div className=\"Emails__SentMail_row\">\r\n                  <b>From:</b>\r\n                  <h6>{mail.senderemail}</h6>\r\n                  <b>Subject:</b>\r\n                  <h6>{mail.subject}</h6>\r\n                  <b>Body:</b>\r\n                  <h6>{mail.text}</h6>\r\n                  <b>Date and Time:</b>\r\n                  <h6>{mail.date + \" -- \" + mail.time}</h6>\r\n                  <i\r\n                    class=\"fa fa-trash-o\"\r\n                    onClick={() => {\r\n                      deleteInboxMailHandler(mail._id);\r\n                    }}\r\n                    title=\"Delete Mail\"\r\n                  ></i>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Emails__SentMail_container\" hidden={!showSent}>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            deleteAllSentMailsHandler();\r\n          }}\r\n          className=\"form-control customform\"\r\n        >\r\n          Clear Sent Mails\r\n        </button>\r\n        <div>\r\n          {sentMails.length === 0 ? (\r\n            <h1 className=\"Emails__emptymail\">No Mails</h1>\r\n          ) : (\r\n            sentMails.map((mail) => {\r\n              return (\r\n                <div className=\"Emails__SentMail_row\">\r\n                  <b>To:</b>\r\n                  {mail.receiveremails.map((receivermail) => (\r\n                    <h6>{receivermail}</h6>\r\n                  ))}\r\n                  <b>Subject:</b>\r\n                  <h6>{mail.subject}</h6>\r\n                  <b>Body:</b>\r\n                  <h6>{mail.text}</h6>\r\n                  <b>Date and Time:</b>\r\n                  <h6>{mail.date + \" -- \" + mail.time}</h6>\r\n                  <i\r\n                    class=\"fa fa-trash-o\"\r\n                    onClick={() => {\r\n                      deleteSentMailHandler(mail._id);\r\n                    }}\r\n                    title=\"Delete Mail\"\r\n                  ></i>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n      <EmojiPickerModal\r\n        isShown={emojiPickerModal.isShown}\r\n        setIsShown={setEmojiPickerModal}\r\n        message={newMailBody}\r\n        setMessage={setNewMailBody}\r\n        emojiText={emojiText}\r\n        setEmojiText={setEmojiText}\r\n      />\r\n      <CreateGroupModal\r\n        isShown={createGroupModal.isShown}\r\n        setIsShown={setCreateGroupModal}\r\n        email={user.email}\r\n        allEmails={allEmails.filter((email) => {\r\n          return email.isGroup !== true;\r\n        })}\r\n        setConnections={setConnections}\r\n      />\r\n      <DeleteGroupModal\r\n        isShown={deleteGroupModal.isShown}\r\n        setIsShown={setDeleteGroupModal}\r\n        email={user.email}\r\n        allgroups={deleteGroupModal.allgroups}\r\n        setConnections={setConnections}\r\n      />\r\n      <TimerModal\r\n        isShown={timerModal.isShown}\r\n        setIsShown={setTimerModal}\r\n        email={user.email}\r\n        toEmails={toEmails}\r\n        setToEmails={setToEmails}\r\n        subject={subject}\r\n        setSubject={setSubject}\r\n        newMailBody={newMailBody}\r\n        setNewMailBody={setNewMailBody}\r\n        newMailAttachments={newMailAttachments}\r\n        setNewMailAttachments={setNewMailAttachments}\r\n      />\r\n      <TemplateModal\r\n        isShown={modal.isShown}\r\n        setIsShown={setModal}\r\n        ModalTitle={modal.ModalTitle}\r\n        ModalBody={modal.ModalBody}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Emails;\r\n","export default __webpack_public_path__ + \"static/media/Sharan.ddcac13f.JPG\";","export default __webpack_public_path__ + \"static/media/Roshan.34179e4b.jpg\";","export default __webpack_public_path__ + \"static/media/Sunil.f0bc7d63.jpg\";","import React from \"react\";\r\nimport \"./AboutUs.css\";\r\nimport SharanImg from \"../../assets/images/Sharan.JPG\";\r\nimport RoshanImg from \"../../assets/images/Roshan.jpg\";\r\nimport SunilImg from \"../../assets/images/Sunil.jpg\";\r\n\r\nconst AboutUs = () => {\r\n  return (\r\n    <div className=\"AboutUs\">\r\n      <div className=\"row\">\r\n        <div className=\"col card\">\r\n          <img src={RoshanImg} />\r\n          <h5>\r\n            <b>Shaik Roshan Nabi</b>\r\n          </h5>\r\n          <h5>\r\n            <b>Quality Assurance Tester</b>\r\n          </h5>\r\n          <a href=\"https://www.facebook.com/roshan.nabi.3\" target=\"_blank\">\r\n            Facebook Profile\r\n          </a>\r\n        </div>\r\n        <div className=\"col card\">\r\n          <img src={SharanImg} />\r\n          <h5>\r\n            <b>Konda Sharan Sai Reddy</b>\r\n          </h5>\r\n          <h5>\r\n            <b>Lead Developer</b>\r\n          </h5>\r\n          <a\r\n            href=\"https://www.linkedin.com/in/sharan-konda-90b3a6193/\"\r\n            target=\"_blank\"\r\n          >\r\n            Linkedin Profile\r\n          </a>\r\n        </div>\r\n        <div className=\"col card\">\r\n          <img src={SunilImg} />\r\n          <h5>\r\n            <b>Sunil Kumar</b>\r\n          </h5>\r\n          <h5>\r\n            <b>Database Architect</b>\r\n          </h5>\r\n          <a href=\"https://www.facebook.com/sunil.jngp/\" target=\"_blank\">\r\n            Facebook Profile\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutUs;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\n\r\nimport Login from \"./components/Login/Login\";\r\nimport PageTemplate from \"./components/PageTemplate/PageTemplate\";\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\nimport Connections from \"./components/Connections/Connections\";\r\nimport DirectMessages from \"./components/DirectMessages/DirectMessages\";\r\nimport GroupMessages from \"./components/GroupMessages/GroupMessages\";\r\nimport Emails from \"./components/Emails/Emails\";\r\nimport AboutUs from \"./components/AboutUs/AboutUs\";\r\n\r\nconst RouterSetup = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/login\" />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route exact path=\"/aboutus\">\r\n            <PageTemplate>\r\n              <AboutUs />\r\n            </PageTemplate>\r\n          </Route>\r\n          <Route exact path=\"/dashboard\">\r\n            <PageTemplate>\r\n              <Dashboard />\r\n            </PageTemplate>\r\n          </Route>\r\n          <Route exact path=\"/connections\">\r\n            <PageTemplate>\r\n              <Connections />\r\n            </PageTemplate>\r\n          </Route>\r\n          <Route exact path=\"/directmessages\">\r\n            <PageTemplate>\r\n              <DirectMessages />\r\n            </PageTemplate>\r\n          </Route>\r\n          <Route exact path=\"/groupmessages\">\r\n            <PageTemplate>\r\n              <GroupMessages />\r\n            </PageTemplate>\r\n          </Route>\r\n          <Route exact path=\"/emails\">\r\n            <PageTemplate>\r\n              <Emails />\r\n            </PageTemplate>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouterSetup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport RouterSetup from \"./RouterSetup\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"/api\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div class=\"App__container\">\r\n      <RouterSetup />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reducer, { initialState } from \"./reducer\";\nimport StateProvider from \"./StateProvider\";\n\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}